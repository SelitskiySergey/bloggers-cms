@using Pds.Web.Components.Pagination

<nav class="col">
    <ul class="pagination paging-position">
        @foreach (var page in pages)
        {
            <li class="page-item">
                <button class="btn btn-sm btn-paging 
                    @(page.Active ? "btn-primary" : "btn-outline-primary")
                    @(page.Enabled ? null : "disabled")"
                        @onclick="@(() => OnChangePage(page))">
                    @(page.Text)
                </button>
            </li>
        }
        <li>
            <select class="btn btn-sm page-size-selector" @onchange="@OnChangePageSize">
                @foreach (var pageSize in PageSizeList)
                {
                    if (pageSize == DefaultPageSize.Value)
                    {
                        <option class="paging-item" value="@pageSize" selected>@pageSize</option>
                    }
                    else
                    {
                        <option class="paging-item" value="@pageSize">@pageSize</option>
                    }
                }
            </select>
        </li>
    </ul>
    <span class="paging-info" >всего страниц: <b>@totalPages</b> шт.</span>
</nav>

@code{
    private int[] _pageSizeList;
    private int _totalItems;
    private int _defaultPageSize;
    private int _radius;

    [Parameter]
    public EventCallback<PagingEventArgs> OnPagination { get; set; }

    [Parameter]
    public int[] PageSizeList
    {
        get => _pageSizeList;
        set
        {
            var array = value.Where(item => item >= 1).ToArray();
            _pageSizeList = array.Length == 0 ? new [] { 10 } : array;
        }
    }

    [Parameter]
    public int? DefaultPageSize
    {
        get => _defaultPageSize;
        set
        {
            if (value < 1)
                _defaultPageSize = 1;
            else
                _defaultPageSize = value ?? 10;
        }
    }

    [Parameter]
    public int? TotalItems
    {
        get => _totalItems;
        set
        {
            if (value < 0)
                _totalItems = 0;
            else
                _totalItems = value ?? 0;
        }
    }

    [Parameter]
    public int? Radius
    {
        get => _radius;
        set
        {
            if (value < 1)
                _radius = 2;
            else
                _radius = value ?? 2;
        }
    }

    [CascadingParameter]
    public bool IsPagingStateHasChanged { get; set; }

    private int pageOffset;
    private int currentPage;
    private int totalPages;
    private int currentPageSize;

    private List<PageModel> pages;

    protected override void OnInitialized()
    {
        currentPageSize = DefaultPageSize.Value;
        SetDefaultPagination();
    }

    protected override void OnParametersSet()
    {
        totalPages = (int)Math.Ceiling((double)TotalItems / currentPageSize);
        if (totalPages <= 1 || IsPagingStateHasChanged)
            currentPage = 1;
        LoadPages();
    }

    protected void OnChangePageSize(ChangeEventArgs e)
    {
        var isPageSizeChanged = int.TryParse(e.Value.ToString(), out currentPageSize);
        if (!isPageSizeChanged)
            currentPageSize = DefaultPageSize.Value;

        SetDefaultPagination();
        PaginationInvoke();
    }

    private void OnChangePage(PageModel page)
    {
        if (page.Page == currentPage)
        {
            return;
        }

        if (!page.Enabled)
        {
            return;
        }
        currentPage = page.Page;
        pageOffset = (currentPage - 1) * currentPageSize;
        PaginationInvoke();
    }

    private void PaginationInvoke()
    {
        var settings = new PagingEventArgs(currentPageSize, pageOffset);
        OnPagination.InvokeAsync(settings);
    }

    private void SetDefaultPagination()
    {
        pageOffset = default;
        currentPage = 1;
        LoadPages();
    }

    private void LoadPages()
    {
        pages = new List<PageModel>();
        var isPreviousPageLinkEnabled = currentPage > 1 && totalPages > 0;

        var previousPage = currentPage - 1;
        pages.Add(new PageModel(previousPage, isPreviousPageLinkEnabled, "← сюда"));

        for (int i = 1; i <= totalPages; i++)
        {
            if (i > currentPage - Radius && i < currentPage + Radius)
            {
                pages.Add(new PageModel(i) { Active = currentPage == i });
            }
        }

        var isNextPageLinkEnabled = currentPage < totalPages && totalPages > 0;
        var nextPage = currentPage + 1;
        pages.Add(new PageModel(nextPage, isNextPageLinkEnabled, "туда →"));
    }
}