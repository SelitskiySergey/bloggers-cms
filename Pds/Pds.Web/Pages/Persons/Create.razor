@page "/persons/add"
@attribute [Authorize] 
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Person
@using System.Net.Http.Headers
@using Newtonsoft.Json
@using Pds.Data.Entities

@inject HttpClient HttpClient
@inject IConfiguration Configuration
@inject IAccessTokenProvider TokenProvider
@inject NavigationManager NavigationManager

<h1>Добавление персоны</h1>

<EditForm EditContext="@editContext" OnSubmit="@HandleSubmit">
    <div class="form-group">
        <label for="firstName">Имя</label>
        <InputText class="form-control" id="firstName" @bind-Value="person.FirstName"/>
    </div>

    <div class="form-group">
        <label for="lastName">Фамилия</label>
        <InputText class="form-control" id="lastName" @bind-Value="person.LastName"/>
    </div>

    <div class="form-group">
        <label for="thirdName">Отчество</label>
        <InputText class="form-control" id="thirdName" @bind-Value="person.ThirdName"/>
    </div>

    <div class="form-group">
        <label>Адрес</label>
        <div class="form-row align-items-center">
            <div class="col-auto">
                <InputText class="form-control mb-2" id="country" @bind-Value="person.Country" placeholder="Страна"/>
            </div>
            <div class="col-auto">
                <InputText class="form-control mb-2" id="city" @bind-Value="person.City" placeholder="Город"/>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="information">Дополнительная информация</label>
        <InputTextArea class="form-control" id="information" @bind-Value="person.Information" rows="3"/>
    </div>

    <div class="form-group">
        <div class="form-inline">
            Рейтинг: <InputNumber style="width: 80px;" class="form-control" max="100" min="0" @bind-Value="person.Rate" placeholder="Рейтинг"/>
        </div>
    </div>

    <div class="form-group">
        <label style="margin-right: 20px;">Ссылки</label>
        @foreach (var resource in person.Resources)
        {
            <div class="form-row align-items-center">
                <div class="col-auto">
                    <InputText class="form-control mb-2" id="country" @bind-Value="resource.Name" required="required" placeholder="Название"/>
                </div>
                <div class="col-auto">
                    <InputText class="form-control mb-2" id="city" @bind-Value="resource.Url" required="required" placeholder="Ссылка"/>
                </div>
                <div class="col-auto">
                    <div @onclick="() => RemoveResource(resource)" class="btn btn-danger btn-sm mb-2">Удалить ссылку</div>
                </div>
            </div>
        }

        <div @onclick="AddResource" class="btn btn-success btn-sm">Добавить ссылку</div>
    </div>

    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <button type="submit" class="btn btn-success">Создать персону</button>
    </div>
</EditForm>

@code {
    private CreatePersonRequest person = new()
    {
        Rate = 0,
        Resources = new List<ResourceDto>{}
    };
    private EditContext editContext;
    
    protected override void OnInitialized()
    {
        editContext = new EditContext(person);
    }
    
    private async Task HandleSubmit()
    {
        var isValid = editContext.Validate();

        if (isValid)
        {
            var backendApiUrl = Configuration["BackendApi:Url"];
            using var requestMessage = new HttpRequestMessage(HttpMethod.Post, $"{backendApiUrl}/api/persons")
            {
                Content = new ByteArrayContent(System.Text.Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(person)))
            };

            var tokenResult = await TokenProvider.RequestAccessToken();
            if (tokenResult.TryGetToken(out var token))
            {
                requestMessage.Headers.Authorization =
                    new AuthenticationHeaderValue("Bearer", token.Value);
                requestMessage.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

                await HttpClient.SendAsync(requestMessage);
                NavigationManager.NavigateTo("/persons");
            }
        }
    }

    private void AddResource()
    {
        var resource = new ResourceDto();
        person.Resources.Add(resource);
    }

    private void RemoveResource(ResourceDto resource)
    {
        person.Resources.Remove(resource);
    }
}