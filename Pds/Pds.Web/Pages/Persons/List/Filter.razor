@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Web.Common
@using Pds.Web.Models.Person
@using Microsoft.AspNetCore.Components
@using AutoMapper
@using Pds.Api.Contracts
@using Pds.Api.Contracts.Brand
@using Pds.Core.Enums

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider
@inject IApiClient ApiClient
@inject IMapper Mapper

@if (brands == null)
{
    <p>
        <em>Загрузка фильтр...</em>
    </p>
}
else
{
    <div class="filter">
        <EditForm EditContext="@editContext">
            <div class="form-group no-wrap">
                <span class="filter-row-title">Бренд:</span>
                @foreach (var brandFilterItem in filterSettings.BrandFilterItems)
                {
                    var id = $"sm_type_{brandFilterItem.Id.ToString()}";
                    <InputCheckbox name="@id" class="btn-check" @bind-Value="brandFilterItem.IsSelected" Id="@id" />
                    <label class="btn btn-secondary" for="@id">
                        @brandFilterItem.Name
                    </label>
                }
                <SearchComponent Search="SearchOnChanged" />
            </div>
            
            <div class="form-group no-wrap">
                <span class="filter-row-title">Статус:</span>
                @foreach (var statusFilterItem in filterSettings.PersonStatusFilterItems)
                {
                    var id = $"status_{statusFilterItem.PersonStatus.ToString()}";
                    <InputCheckbox name="@id" class="btn-check" @bind-Value="statusFilterItem.IsSelected" Id="@id"/>
                    <label class="btn btn-secondary" for="@id">
                        @EnumsTranslator.PersonStatusToRu(statusFilterItem.PersonStatus)
                    </label>
                }
            </div>
            <div class="form-group no-wrap">
                <span class="filter-row-title">Прочее:</span>
                <InputCheckbox name="is_nds" class="btn-check" @bind-Value="filterSettings.IsContactEstablished" Id="is_contact_established"/>
                <label for="is_contact_established" class="btn btn-secondary">Контакт установлен</label>
            </div>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public EventCallback<FilterSettings> OnFilterUpdate { get; set; }
    [Parameter]
    public EventCallback<string> OnSearch { get; set; }

    private EditContext editContext;
    private FilterSettings filterSettings { get; set; }
    private List<BrandDto> brands { get; set; }

    protected override async Task OnInitializedAsync()
    {
        brands = await GetBrands();
        filterSettings = GetFilterSettings(brands);
        editContext = new EditContext(filterSettings);
        editContext.OnFieldChanged += EditContext_OnFieldChanged;
        await OnFilterUpdate.InvokeAsync(filterSettings); //trigger filter initialize
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        OnFilterUpdate.InvokeAsync(filterSettings);
    }
    
    private void SearchOnChanged(string searchText)
    {
        OnSearch.InvokeAsync(searchText);
    }

    private FilterSettings GetFilterSettings(List<BrandDto> brands)
    {
        var filter = new FilterSettings
        {
            BrandFilterItems = Mapper.Map<List<BrandFilterItem>>(brands),
            PersonStatusFilterItems = ((PersonStatus[]) Enum.GetValues(typeof(PersonStatus)))
                .Select(gType =>
                    new PersonStatusFilterItem()
                    {
                        PersonStatus = gType,
                        IsSelected = false
                    })
                .ToList(),
        };
        
        SetDefaultFilterValues(filter, brands);

        return filter;
    }

    private void SetDefaultFilterValues(FilterSettings filter, List<BrandDto> brands)
    {
        // Set default brand
        var defaultBrand = brands.FirstOrDefault(b => b.IsDefault);
        if (defaultBrand != null)
        {
            filter.BrandFilterItems.First(b => b.Id == defaultBrand.Id).IsSelected = true;
        }
        
        filter.PersonStatusFilterItems
            .First(u => u.PersonStatus == PersonStatus.Active)
            .IsSelected = true;
    }

    private async Task<List<BrandDto>> GetBrands()
    {
        return await ApiClient.Get<List<BrandDto>>(TokenProvider, "content/get-brands");
    }
}