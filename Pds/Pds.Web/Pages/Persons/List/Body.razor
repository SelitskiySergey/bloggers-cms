@page "/persons"
@inherits BasePageComponent

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Person
@using Pds.Web.Common
@using Pds.Web.Pages.Content
@using Api.Contracts.Paging
@using Pds.Web.Components.Sorting.QueryCreators
@using Pds.Web.Components.Sorting.QueryCreators.Person
@using Pds.Web.Components.Search.Person
@using Pds.Web.Models.Person
@using Calabonga.PredicatesBuilder
@using static Pds.Web.Common.TitleExtension

@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Персоны")</Title>


@if (personsInfo == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <h4 class="card-header d-flex justify-content-between align-items-center">
        <span>
            Список персон
            <span class="title-overall-info">
                @{ var overallCount = $"{totalElements} шт.";}
                @overallCount
            </span> 
        </span>
        <a href="/persons/add" class="btn btn-success">Добавить</a>
    </h4>

    <Filter OnFilterUpdate="@FilterUpdated" OnSearch="@OnSearch" />

    <table class="table">
        <thead>
            <tr>
                <th class="person-header">
                    <SortingComponent TField="PersonsFieldName"
                                      OnSortColumn="SortPersons"
                                      FieldName="PersonsFieldName.FullName">Кто</SortingComponent>
                </th>
                <th class="rate-header">
                    <SortingComponent TField="PersonsFieldName"
                                      OnSortColumn="SortPersons"
                                      FieldName="PersonsFieldName.Rating">Рейтинг</SortingComponent>
                </th>
                <th>
                    <SortingComponent TField="PersonsFieldName"
                                      OnSortColumn="SortPersons"
                                      FieldName="PersonsFieldName.Location">Где</SortingComponent>
                </th>
                <th class="topics-header">Темы</th>
                <th>Информация</th>
                <th>Ссылки</th>
                <th class="text-center actions-header">Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in personsList)
            {
                <tr class="@PersonsHelper.GetBgColorClass(person.Status)">
                    <td class="person-row">
                        <a class="custom-link" href="persons/@person.Id">@person.FullName</a>
                        <span class="contents">
                            (@person.Contents.Count)
                        </span>
                    </td>
                    <td class="rate-row">
                        @person.Rate
                    </td>
                    <td class="location-row">
                        @person.Location
                    </td>
                    <td class="topics-row">
                        @person.Topics
                    </td>
                    <td class="info-row">
                        @person.Info
                    </td>
                    <td>
                        @foreach (var resource in person.Resources)
                        {
                            <div>
                                <a class="custom-link" href="@resource.Url" target="_blank">@resource.Name</a>
                            </div>
                        }
                    </td>
                    <td class="text-center">
                        <Actions OnPersonUpdate="@PersonsInfoUpdate" CurrentPerson="@person"></Actions>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <CascadingValue Value="isPagingStateHasChanged">
        <PagingComponent PageSizeList="@pageSizesList"
                         DefaultPageSize="@defaultPageSize"
                         TotalItems="totalElements"
                         Radius="2"
                         Pagination="Pagination" />
    </CascadingValue>
}

@code {
    private GetPersonsResponse personsInfo;
    private PersonDto[] personsList;
    private static readonly int[] pageSizesList = { 10, 30, 50, 100 };
    private readonly int defaultPageSize = pageSizesList[1];
    private int totalElements;
    private bool isPagingStateHasChanged;
    private PageSettings pageSettings;
    private OrderSetting<PersonsFieldName>[] orderSettings;
    private PersonsPageSearchSettings searchSettings;
    private FilterSettings filterSettings;

    protected override async Task OnInitializedAsync()
    {
        pageSettings = new PageSettings
        {
            Limit = defaultPageSize,
            Offset = 0
        };

        orderSettings = new[]
        {
            new OrderSetting<PersonsFieldName>()
        };

        searchSettings = new PersonsPageSearchSettings
        {
            Search = string.Empty
        };

        filterSettings = new FilterSettings
        {
            BrandFilterItems = new List<BrandFilterItem>()
        };

        await PersonsInfoUpdate();
    }

    private async Task PersonsInfoUpdate()
    {
        personsInfo = await GetPersonsInfo();
        SetDefaultPaging();
        GetPersonsList();
    }

    private async Task<GetPersonsResponse> GetPersonsInfo()
    {
        return await ApiClient.Get<GetPersonsResponse>(TokenProvider, "persons");
    }

    private void GetPersonsList()
    {
        var query = personsInfo.Items
            .AsQueryable();

        //Filtering
        var totalSelectedFiltersCount = filterSettings.BrandFilterItems
            .Where(i => i.IsSelected)
            .Select(i => i.Id)
            .Count();

        if (totalSelectedFiltersCount > 0)
        {
            var filteringPredicate = PredicateBuilder.False<PersonDto>();
            foreach (var brand in filterSettings.BrandFilterItems.Where(i => i.IsSelected))
            {
                filteringPredicate = filteringPredicate.Or(r => r.Brands.Exists(s => s.Id == brand.Id));
            }

            query = query.Where(filteringPredicate);
        }

        //Sorting
        if (orderSettings?.Length > 0)
        {
            var dictionary = new Dictionary<PersonsFieldName, IOrderQuery<PersonDto, PersonDto>>
            {
                {PersonsFieldName.FullName, new PersonFullNameOrderQueryCreator()},
                {PersonsFieldName.Rating, new PersonRatingOrderQueryCreator()},
                {PersonsFieldName.Location, new PersonLocationOrderQueryCreator()}
            };

            var queryCreator = new OrderQueryCreator<PersonDto, PersonsFieldName>(dictionary);
            query = queryCreator.Create(orderSettings, query);
        }
        else
        {
            query = query
                .OrderBy(p => p.FullName)
                .ThenBy(p => p.Rate);
        }

        //Search
        var searchLine = searchSettings.Search?.ToLower();
        if (!string.IsNullOrWhiteSpace(searchLine))
        {
            var searchPredicate = new PersonsSearch().GetSearchPredicate(searchLine);
            query = query.Where(searchPredicate);
        }

        //Paging
        personsList = query.ToArray();
        totalElements = personsList.Length;
        personsList = personsList
            .Skip(pageSettings.Offset)
            .Take(pageSettings.Limit)
            .ToArray();
    }

    private void Pagination(PagingEventArgs settings)
    {
        isPagingStateHasChanged = default;
        pageSettings = new PageSettings
        {
            Limit = settings.PageSize,
            Offset = settings.PageOffSet
        };

        GetPersonsList();
    }

    private void SortPersons(OrderSetting<PersonsFieldName> settings)
    {
        SetDefaultPaging();
        orderSettings = new[]
        {
            settings
        };

        GetPersonsList();
    }

    private void OnSearch(string searchText)
    {
        SetDefaultPaging();
        searchSettings.Search = searchText;
        GetPersonsList();
    }

    private void FilterUpdated(FilterSettings filterSettings)
    {
        this.filterSettings = filterSettings;

        SetDefaultPaging();
        GetPersonsList();
    }

    private void SetDefaultPaging()
    {
        isPagingStateHasChanged = true;
        pageSettings.Offset = 0;
        pageSettings.Limit = defaultPageSize;
    }
}