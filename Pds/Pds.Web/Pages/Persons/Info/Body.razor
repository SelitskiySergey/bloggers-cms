@page "/persons/{personId}"
@inherits BasePageComponent
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Person
@using Pds.Web.Common
@using static Pds.Web.Common.TitleExtension
@using AutoMapper
@using Pds.Core.Extensions

@inject NavigationManager NavigationManager
@inject IApiClient ApiClient
@inject IMapper Mapper
@inject IAccessTokenProvider TokenProvider

@if (person == null)
{
    <p>
        <em>
            Подождите, идет загрузка...
        </em>
    </p>
}
else
{
    <Title>@WithSuffix($"Персона \"{person.FullName}\"")</Title>

    <h4 class="card-header d-flex justify-content-between align-items-center">
        Персона "@person.FullName"
        <button @onclick="GoBack" class="btn btn-primary">Назад</button>
    </h4>

    <div class="page-container">
        <div class="info-item">
            <div class="info-title">Бренды</div>
            <div class="info-body">
                @((MarkupString)person.Brands.Select(b => b.Name).Aggregate("", (current, pp) => current + $"{pp}<br/>"))
            </div>
        </div>
        
        <div class="info-item">
            <div class="info-title">Имя и Фамилия</div>
            <div class="info-body">
                <b>@person.FullName</b>
                <ul>
                    <li>Рейтинг: <b>@person.Rate</b></li>
                    @if (!string.IsNullOrEmpty(person.Location))
                    {
                        <li>Откуда: <b>@person.Location</b></li>
                    }
                    <li>
                        Создана: @person.CreatedAt.ToLongStringDate()
                    </li>
                    @if (person.UpdatedAt != null)
                    {
                        <li class="no-wrap">
                            Отредактирована: @person.UpdatedAt.Value.ToLongStringDate()
                        </li>
                    }
                </ul>
            </div>
        </div>
        
        @if (person.Contents.Any())
        {
            <div class="info-item">
                <div class="info-title">Контент (@person.Contents.Count)</div>
                <div class="info-body">
                    <ul>
                        @foreach (var content in person.Contents.OrderByDescending(p=>p.ReleaseDate))
                        {
                            <li>
                                <a class="custom-link" href="content/@content.Id">
                                    @($"{content.ReleaseDate.ToLongStringDate()} / {content.Title}")
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }
    
        @if (!string.IsNullOrWhiteSpace(person.Info))
        {
            <div class="info-item">
                <div class="info-title">Информация</div>
                <div class="info-body">
                    @person.Info
                </div>
            </div>
        }
        
        @if (person.Resources.Any())
        {
            <div class="info-item">
                <div class="info-title">Ссылки</div>
                <div class="info-body">
                    <ul>
                        @foreach (var resource in person.Resources)
                        {
                            <li>
                                <a class="custom-link" href="@resource.Url" target="_blank">@resource.Name</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }

        <div class="info-item">
            <Actions OnPersonUpdate="@ContentInfoUpdate" CurrentPerson="@person"></Actions>
        </div>
    </div>
}

@code {
    [Parameter]
    public string PersonId { get; set; }
    private GetPersonResponse person { get; set; }

    protected override async Task OnInitializedAsync()
    {
        person = await GetPersonAsync();
    }

    private async Task<GetPersonResponse> GetPersonAsync()
    {
        var result = await ApiClient.Get<PersonDto>(TokenProvider, $"persons/{PersonId}");
        return Mapper.Map<GetPersonResponse>(result);
    }

    private async Task ContentInfoUpdate()
    {
        person = await GetPersonAsync();
    }

}