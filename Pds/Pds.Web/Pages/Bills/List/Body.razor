@page "/bills"
@inherits BasePageComponent
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Bill
@using Pds.Core.Enums
@using Pds.Core.Extensions
@using Pds.Web.Common
@using Pds.Web.Models.Bill
@using static Pds.Web.Common.TitleExtension 

@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Доходы")</Title>
@if (billsInfo == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <h4 class="card-header d-flex justify-content-between align-items-center">
        <span>
        Список доходов 
            <span class="title-overall-info">
                @billsInfo.Items.Count(i => i.IsVisible) шт.
                / 
                $@billsInfo.Items.Where(i => i.IsVisible).Sum(i => i.Value).ToString("N0")
            </span> 
        </span>
        <a href="/bills/add" class="btn btn-success" >Добавить</a>
    </h4>
    <Filter OnFilterUpdate="@OnFilterUpdate"></Filter>
    <table class="table">
        <thead>
        <tr>
            <th class="paid-date-header">Когда</th>
            <th class="id-header">ID</th>
            <th class="bill-cost-header">Сколько</th>
            <th>Тип</th>
            <th>Бренд</th>
            <th>Комментарий</th>
            <th class="text-center actions-header">Действия</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var bill in billsInfo.Items.Where(i => i.IsVisible))
        {
            <tr>
                <td class="paid-date-row">
                    <span>
                        @bill.PaidAt.Date.ToString("dd.MM.yyyy")
                    </span>
                </td>
                <td>
                    <span class="id-row">
                        @bill.Id.ToShortString()
                    </span>
                </td>
                <td class="bill-cost-row">
                    <span>@bill.Value.ToString("N0")</span>
                    <i class="@GetPaymentTypeClass(bill.PaymentType)">
                        @EnumsTranslator.PaymentTypeToShortRu(bill.PaymentType)
                    </i>
                </td>
                <td>
                    @EnumsTranslator.BillTypeToRu(bill.Type)
                </td>
                <td>@bill.Brand.Name</td>
                <td>
                    @if (bill.Content != null)
                    {
                        <div>
                            Контент: <a class="custom-link" href="content/@bill.Content.Id">@bill.Content.Title</a>
                        </div>
                    }
                    @bill.Comment
                </td>
                <td class="text-center">
                    <Actions OnBillUpdate="@OnBillUpdate" CurrentBill="@bill"></Actions>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private GetBillsResponse billsInfo;
    private FilterSettings currentFilterSettings;

    protected override async Task OnInitializedAsync()
    {
        billsInfo = await GetBillsInfo();
    }

    private async Task OnBillUpdate()
    {
        billsInfo = await GetBillsInfo();
        OnFilterUpdate(currentFilterSettings);
    }

    private async Task<GetBillsResponse> GetBillsInfo()
    {
        return await ApiClient.Get<GetBillsResponse>(TokenProvider, "bills/paid");
    }
    
    private string GetPaymentTypeClass(PaymentType? type)
    {
        return type == PaymentType.BankAccount ? "yellow" : "red";
    }

    private void OnFilterUpdate(FilterSettings filterSettings)
    {
        currentFilterSettings = filterSettings;
        var selectedSocialMediaTypes = filterSettings.SocialMediaFilterItems
            .Where(i => i.IsSelected)
            .Select(i => i.SocialMediaType)
            .ToList();
        var selectedBillTypes = filterSettings.BillTypeFilterItems
            .Where(i => i.IsSelected)
            .Select(i => i.BillType)
            .ToList();
        var selectedPaymentTypes = filterSettings.PaymentTypeFilterItems
            .Where(i => i.IsSelected)
            .Select(i => i.PaymentType)
            .ToList();
        var selectedBrandsIds = filterSettings.BrandFilterItems
            .Where(i => i.IsSelected)
            .Select(i=>i.Id)
            .ToList();
        var totalSelectedFiltersCount = 
            selectedSocialMediaTypes.Count + 
            selectedBrandsIds.Count + 
            selectedPaymentTypes.Count +
            selectedBillTypes.Count;

        var itemsToShow = billsInfo.Items
            .Where(i => 
                (i.Content != null && selectedSocialMediaTypes.Contains(i.Content.SocialMediaType) || selectedSocialMediaTypes.Count == 0) &&
                (selectedPaymentTypes.Contains(i.PaymentType) || selectedPaymentTypes.Count == 0) &&
                (selectedBillTypes.Contains(i.Type) || selectedBillTypes.Count == 0) &&
                (selectedBrandsIds.Contains(i.Brand.Id)  || selectedBrandsIds.Count == 0) &&
                (filterSettings.From != null && i.PaidAt.Date >= filterSettings.From.Value.Date || filterSettings.From == null) &&
                (filterSettings.To != null && i.PaidAt.Date <= filterSettings.To.Value.Date || filterSettings.To == null));

        foreach (var item in billsInfo.Items)
        {
            if (totalSelectedFiltersCount == 0)
            {
                item.IsVisible = true;
                continue;
            }

            item.IsVisible = itemsToShow.Contains(item);
        }
    }
}