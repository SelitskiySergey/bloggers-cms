@page "/bills"
@inherits BasePageComponent
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Bill
@using Pds.Core.Enums
@using Pds.Core.Extensions
@using Pds.Web.Common
@using Pds.Web.Components.Search.Bills
@using Pds.Web.Models.Bill
@using static Pds.Web.Common.TitleExtension 

@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Доходы")</Title>
@if (bills == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <h4 class="card-header d-flex justify-content-between align-items-center">
        <span>
        Список доходов 
            <span class="title-overall-info">
                @($"{totalElements} шт. / ${totalCost:N0}")
            </span> 
        </span>
        <a href="/bills/add" class="btn btn-success" >Добавить</a>
    </h4>
    <Filter OnFilterUpdate="@OnFilterUpdate" OnSearch="@OnSearch"></Filter>
    @if (isFilterLoaded)
    {
        <table class="table">
            <thead>
            <tr>
                <th class="paid-date-header">Когда</th>
                <th class="id-header">ID</th>
                <th class="bill-cost-header">Сколько</th>
                <th>Тип</th>
                <th>Бренд</th>
                <th>Комментарий</th>
                <th class="text-center actions-header">Действия</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var bill in filteredBills)
            {
                <tr>
                    <td class="paid-date-row">
                        <span>
                            @bill.PaidAt.Date.ToString("dd.MM.yyyy")
                        </span>
                    </td>
                    <td>
                        <span class="id-row">
                            @bill.Id.ToShortString()
                        </span>
                    </td>
                    <td class="bill-cost-row">
                        <span>@bill.Value.ToString("N0")</span>
                        <i class="@GetPaymentTypeClass(bill.PaymentType)">
                            @EnumsTranslator.PaymentTypeToShortRu(bill.PaymentType)
                        </i>
                    </td>
                    <td>
                        @EnumsTranslator.BillTypeToRu(bill.Type)
                    </td>
                    <td>@bill.Brand.Name</td>
                    <td>
                        @if (bill.Client != null)
                        {
                            <div>
                                Клиент: <a class="custom-link" href="clients/@bill.Client.Id">@bill.Client.Name</a>
                            </div>
                        }
                        @if (bill.Content != null)
                        {
                            <div>
                                Контент: <a class="custom-link" href="content/@bill.Content.Id">@bill.Content.Title</a></div>
                        }
                        @bill.Comment
                    </td>
                    <td class="text-center actions-header">
                        <Actions OnActionsUpdate="@OnActionsUpdate" CurrentBill="@bill"></Actions>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}

@code {
    private GetBillsResponse bills;
    private BillDto[] filteredBills;
    private string currentSearchText;    
    private FilterSettings currentFilterSettings;
    private int totalElements; 
    private decimal totalCost;
    private bool isFilterLoaded;

    protected override async Task OnInitializedAsync()
    {
        bills = await GetBillsAsync();
    }

    private async Task<GetBillsResponse> GetBillsAsync()
    {
        return await ApiClient.Get<GetBillsResponse>(TokenProvider, "bills/paid");
    }
    
    private string GetPaymentTypeClass(PaymentType? type)
    {
        return type == PaymentType.BankAccount ? "yellow" : "red";
    }

    private BillDto[] GetFilteredBillsList(
        FilterSettings filterSettings, 
        GetBillsResponse bills)
    {
        // Filtering
        var selectedSocialMediaTypes = filterSettings.SocialMediaFilterItems
            .Where(i => i.IsSelected)
            .Select(i => i.SocialMediaType)
            .ToList();
        var selectedBillTypes = filterSettings.BillTypeFilterItems
            .Where(i => i.IsSelected)
            .Select(i => i.BillType)
            .ToList();
        var selectedPaymentTypes = filterSettings.PaymentTypeFilterItems
            .Where(i => i.IsSelected)
            .Select(i => i.PaymentType)
            .ToList();
        var selectedBrandsIds = filterSettings.BrandFilterItems
            .Where(i => i.IsSelected)
            .Select(i=>i.Id)
            .ToList();

        var itemsToShow = bills.Items
            .Where(i => 
                (i.Content != null && selectedSocialMediaTypes.Contains(i.Content.SocialMediaType) || selectedSocialMediaTypes.Count == 0) &&
                (selectedPaymentTypes.Contains(i.PaymentType) || selectedPaymentTypes.Count == 0) &&
                (selectedBillTypes.Contains(i.Type) || selectedBillTypes.Count == 0) &&
                (selectedBrandsIds.Contains(i.Brand.Id)  || selectedBrandsIds.Count == 0) &&
                (filterSettings.From != null && i.PaidAt.Date >= filterSettings.From.Value.Date || filterSettings.From == null) &&
                (filterSettings.To != null && i.PaidAt.Date <= filterSettings.To.Value.Date || filterSettings.To == null));

        var query = itemsToShow
            .AsQueryable();
        
        // Search
        if (!string.IsNullOrWhiteSpace(currentSearchText))
        {
            var searchPredicate = new BillsSearch()
                .GetSearchPredicate(currentSearchText.ToLower());
            query = query.Where(searchPredicate);
        }
        
        return query.ToArray();
    }
    
    private void OnSearch(string searchText)
    {
        currentSearchText = searchText;
        filteredBills = GetFilteredBillsList(currentFilterSettings, bills);
        UpdateStatistics(filteredBills);
    }
    
    private async Task OnActionsUpdate()
    {
        isFilterLoaded = false;
        bills = await GetBillsAsync();
        OnFilterUpdate(currentFilterSettings);
    }

    private void OnFilterUpdate(FilterSettings filterSettings)
    {
        currentFilterSettings = filterSettings;
        filteredBills = GetFilteredBillsList(filterSettings, bills);
        UpdateStatistics(filteredBills);
        isFilterLoaded = true;
    }
    
    private void UpdateStatistics(BillDto[] filteredCosts)
    {
        totalElements = filteredCosts.Length;
        totalCost = filteredCosts.Sum(i => i.Value);
    }
}