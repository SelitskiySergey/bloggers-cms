@page "/settings/{settingId}/edit"
@inherits BasePageComponent
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Web.Common
@using static Pds.Web.Common.TitleExtension 
@using AutoMapper
@using Pds.Api.Contracts.Controllers.Settings.EditSetting
@using Pds.Api.Contracts.Controllers.Settings.GetSetting

@inject NavigationManager NavigationManager
@inject IApiClient ApiClient
@inject IMapper Mapper
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Редактирование настройки")</Title>

@if (setting == null || settingForUpdate == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <h4 class="card-header d-flex justify-content-between align-items-center">
        Редактирование настройки
        <button @onclick='() => GoBack("/settings")' class="btn btn-primary">Назад</button>
    </h4>

    <EditForm EditContext="@editContext" OnSubmit="@HandleSubmit">
        <div class="form-group">
            <i>Ключ:</i>  @setting.Key
        </div>
        
        <div class="form-group">
            <i>Описание:</i>  @setting.Description
        </div>
        
        <div class="form-group">
            <label for="first_name" class="form-label label-required">Значение</label>
            <InputText class="form-control" id="first_name" @bind-Value="settingForUpdate.Value"/>
        </div>

        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group d-grid gap-2 d-md-flex justify-content-md-end">
            <button type="submit" class="btn btn-success" disabled="@isCreateButtonDisabled">Сохранить</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public string SettingId { get; set; }
    private GetSettingResponse setting;
    private EditSettingRequest settingForUpdate;
    private EditContext editContext;
    private ValidationMessageStore msgStore;
    private bool isCreateButtonDisabled;
    
    protected override async Task OnInitializedAsync()
    {
        isCreateButtonDisabled = false;
        settingForUpdate = await GetSetting();
        editContext = new EditContext(settingForUpdate);
        msgStore = new ValidationMessageStore(editContext);
    }
    
    private async Task HandleSubmit()
    {
        msgStore.Clear();
        var isValid = editContext.Validate();

        if (isValid)
        {
            isCreateButtonDisabled = true;
            var result = await ApiClient.Put<object, EditSettingRequest>(TokenProvider, "settings", settingForUpdate);
            isCreateButtonDisabled = false;
            if (result.IsSuccessStatusCode)
            {
                GoBack("/persons");
                NavigationManager.NavigateTo("/settings", forceLoad: true);
            }
            else
            {
                result.AddErrors(msgStore, editContext);
            }
        }
    }

    private async Task<EditSettingRequest> GetSetting()
    {
        setting = await ApiClient.Get<GetSettingResponse>(TokenProvider, $"settings/{SettingId}");
        return Mapper.Map<EditSettingRequest>(setting);
    }
}