@using Pds.Core.Enums
@using Pds.Web.Common
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Controllers.Gift

@namespace Pds.Web.Pages.Gifts.Components

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<div class="panel panel-default actions-panel">
    @{
        var buttonClass = WithLabels ? "btn with-label" : "btn btn-sm";
    }
    @if (CurrentGift.Status != GiftStatus.Completed)
    {
        <button title="Редактировать" class="@buttonClass btn-primary" @onclick="OnEdit">
            <i class="bi bi-pencil-fill"></i>
            @if (WithLabels)
            {
                <span>Редактировать</span>
            }
        </button>
    }

    @if (CurrentGift.Status != GiftStatus.Completed)
    {
        <button title="Отправлен" class="@buttonClass btn-success" @onclick="OnCompleteAsync">
            <i class="bi bi-send-check"></i>
            @if (WithLabels)
            {
                <span>Поменять статус на "Отправлен"</span>
            }
        </button>
    }

    @if (CurrentGift.Status == GiftStatus.Completed)
    {
        <button title="Откатить статус Отправлен" class="@buttonClass btn-warning" @onclick="OnUncompleteAsync">
            <i class="bi bi-send-x"></i>
            @if (WithLabels)
            {
                <span>Откатить статус "Отправлен"</span>
            }
        </button>
    }

    @if (CurrentGift.Status != GiftStatus.Completed)
    {
        <button title="Удалить" class="@buttonClass btn-danger" @onclick="OnDelete">
            <i class="bi bi-trash-fill"></i>
            @if (WithLabels)
            {
                <span>Удалить</span>
            }
        </button>
    }
</div>

@code {
    [Parameter]
    public EventCallback OnActionsUpdate { get; set; }
    [Parameter]
    public IActionsGift CurrentGift { get; set; }
    [Parameter]
    public bool WithLabels { get; set; }

    private void OnEdit()
    {
        NavigationManager.NavigateTo($"/gifts/{CurrentGift.Id}/edit");
    }

    private async Task OnDelete()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Уверены, что хотите удалить {CurrentGift.Id}?");
        if (confirmed)
        {
            await ApiClient.Delete<object>(TokenProvider, $"gifts/{CurrentGift.Id}");
            await OnActionsUpdate.InvokeAsync(); // Update UI
        }
    }

    private async Task OnCompleteAsync()
    {
        await ApiClient.Put<object, object>(TokenProvider, $"gifts/{CurrentGift.Id}/complete", null);
        await OnActionsUpdate.InvokeAsync(); // Update UI
    }

    private async Task OnUncompleteAsync()
    {
        await ApiClient.Put<object, object>(TokenProvider, $"gifts/{CurrentGift.Id}/uncomplete", null);
        await OnActionsUpdate.InvokeAsync(); // Update UI
    }
}