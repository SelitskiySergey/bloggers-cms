@page "/topics/update/{Id}"
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Person
@using Pds.Api.Contracts.Topic
@using Pds.Web.Common
@using static Pds.Web.Common.TitleExtension
@using System.Text.Json

@inject NavigationManager NavigationManager
@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Редактирование темы")</Title>

@if (request is null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <h3 class="card-header d-flex justify-content-between align-items-center">
        Редактирование темы
        <a href="/topics" class="btn btn-primary"> Назад </a>
    </h3>

    <EditForm EditContext="@editContext" OnSubmit="@HandleSubmit">
        <div class="form-group">
            <label for="name" class="form-label">Имя</label>
            <InputText class="form-control" id="name" @bind-Value="request.Name" />
        </div>

        <div class="form-group" id="people">
            <label class="form-label topic-links">Персоны:</label>
            <div class="form-row align-items-center">
                @foreach (var checkBoxPersonDto in checkBoxPeople)
                {
                    var elementId = $"person_{checkBoxPersonDto.Person.Id}";
                    <InputCheckbox id="@elementId" class="btn-check" name="@elementId" @bind-Value="@checkBoxPersonDto.IsSelected" />
                    <label for="@elementId" class="btn btn-outline-primary ml-2">
                        @checkBoxPersonDto.Person.FullName (@checkBoxPersonDto.Person.Rate)
                    </label>
                }
            </div>
        </div>

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group d-grid gap-2 d-md-flex justify-content-md-end">
            <button type="submit" class="btn btn-success" disabled="@isCreateButtonDisabled">Сохранить изменения</button>
        </div>
    </EditForm>
}

@code {
    List<CheckBoxPersonDto> checkBoxPeople;
    private UpdateTopicRequest request;
    private EditContext editContext;
    private bool isCreateButtonDisabled;
    private object response;

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isCreateButtonDisabled = false;
        var topicResponse = await GetTopicResponse();
        if (topicResponse is null)
            NavigationManager.NavigateTo("/topics");
        var getPersonsResponse = await GetPersonResponse();
        checkBoxPeople = getPersonsResponse
            .Items
            .Select(p =>
                new CheckBoxPersonDto
                {
                    Person = p,
                    IsSelected = topicResponse.People
                        .Any(personDto => p.Id == personDto.Id)
                })
            .ToList();
        request = new UpdateTopicRequest();
        request.Name = topicResponse.Name;
        editContext = new EditContext(request);
    }

    private async Task HandleSubmit()
    {
        var isValid = editContext.Validate();

        if (isValid)
        {
            isCreateButtonDisabled = true;

            request.People = checkBoxPeople
                .Where(p => p.IsSelected)
                .Select(cbp => cbp.Person.Id)
                .ToList();
            response = await ApiClient.Put<object, UpdateTopicRequest>(TokenProvider, $"topics/{{{Id}}}", request);

            NavigationManager.NavigateTo("/topics");
        }
    }

    private async Task<GetTopicResponse> GetTopicResponse()
    {
        return await ApiClient.Get<GetTopicResponse>(TokenProvider, $"topics/{{{Id}}}");
    }

    private async Task<GetPersonsResponse> GetPersonResponse()
    {
        return await ApiClient.Get<GetPersonsResponse>(TokenProvider, "persons/");
    }
}