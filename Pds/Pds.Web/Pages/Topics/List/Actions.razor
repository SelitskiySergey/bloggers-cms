@using Pds.Web.Common
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Topic
@using Pds.Core.Enums
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<div class="actions-panel panel panel-default">
    @if (CurrentTopic.Status == TopicStatus.Active)
    {
        <button title="Редактировать" class="btn btn-primary btn-sm" @onclick="OnEdit">
            <i class="bi bi-pencil-fill"></i>
        </button>
    }

    @if (CurrentTopic.Status == TopicStatus.Archived)
    {
        <button title="Разархивировать" class="btn btn-success btn-sm" @onclick="OnUnarchiveAsync">
            <i class="bi bi-patch-plus-fill"></i>
        </button>
    }

    @if (CurrentTopic.Status == TopicStatus.Active)
    {
        <button title="Архивировать" class="btn btn-warning btn-sm" @onclick="OnArchiveAsync">
            <i class="bi bi-archive-fill"></i>
        </button>
    }
</div>

@code {

    [Parameter]
    public TopicDto CurrentTopic { get; set; }

    [Parameter]
    public EventCallback OnTopicUpdate { get; set; }

    private void OnEdit()
    {
        NavigationManager.NavigateTo($"topics/edit/{CurrentTopic.Id}");
    }

    private async Task OnArchiveAsync()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Уверены, что хотите архивировать тему {CurrentTopic.Name}?");
        if (confirmed)
        {
            await ApiClient.Post<object, Guid>(TokenProvider, "topics/archive", CurrentTopic.Id);
            await OnTopicUpdate.InvokeAsync();
        }
    }

    private async Task OnUnarchiveAsync()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Уверены, что хотите разархивировать тему {CurrentTopic.Name}?");
        if (confirmed)
        {
            await ApiClient.Post<object, Guid>(TokenProvider, "topics/unarchive", CurrentTopic.Id);
            await OnTopicUpdate.InvokeAsync();
        }
    }

}