@using Pds.Web.Common
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Topic
@using Pds.Core.Enums
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<button title="Редактировать" class="btn btn-primary btn-sm" @onclick="OnEdit">
    <i class="bi bi-pencil-fill"></i>
</button>


@if (CurrentTopic.Status == TopicStatus.Archived)
{
    <button title="Разархивировать" class="btn btn-secondary btn-sm" @onclick="OnUnarchive">
        <i class="bi bi-trash"></i>
    </button>
}
else
{
    <button title="Архивировать" class="btn btn-danger btn-sm" @onclick="OnArchive">
        <i class="bi bi-trash-fill"></i>
    </button>
}

@code {

    [Parameter]
    public GetTopicDto CurrentTopic { get; set; }

    [Parameter]
    public EventCallback OnTopicUpdate { get; set; }

    private void OnEdit()
    {
        NavigationManager.NavigateTo($"topics/edit/{CurrentTopic.Id}");
    }

    private async Task OnArchive()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Уверены, что хотите архивировать тему {CurrentTopic.Name}?");
        if (confirmed)
        {
            await ApiClient.Post<object, Guid>(TokenProvider, "topics/archive", CurrentTopic.Id);
            await OnTopicUpdate.InvokeAsync();
        }
    }

    private async Task OnUnarchive()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Уверены, что хотите разархивировать тему {CurrentTopic.Name}?");
        if (confirmed)
        {
            await ApiClient.Post<object, Guid>(TokenProvider, "topics/unarchive", CurrentTopic.Id);
            await OnTopicUpdate.InvokeAsync();
        }
    }

}