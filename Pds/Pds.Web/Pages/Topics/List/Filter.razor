@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Topic
@using Pds.Core.Enums
@using Pds.Web.Common.Models.Topic
@using Pds.Web.Common
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider

<div class="d-flex flex-wrap">
    <button class="btn btn-secondary dropdown-toggle btn-lg btn-block" type="button" id="filter_menu_toggle_button" data-toggle="dropdown" aria-expanded="false">
        Меню фильтрации
    </button>

    <div class="dropdown-menu" aria-labelledby="filter_menu_toggle_button">
        <EditForm EditContext="@editContext">
            <ValidationSummary Model="editContext.Model"/>
            <div class="form-group">
                @foreach (var filterItem in FilterSettings.TopicStatusFilter)
                {
                    var id = $"topics_status_{filterItem.Status.ToString()}";
                    <InputCheckbox name="@id" class="btn-check" @bind-Value="filterItem.IsSelected" Id="@id"/>
                    <label class="btn btn-secondary" for="@id">
                        @EnumsTranslator.TopicStatusToRu(filterItem.Status)
                    </label>
                }
            </div>

            <div class="form-group">
                <label for="nameFilter" class="form-label">Фильтраци по названию</label>
                <InputText class="form-control" list="nameFilterList" id="nameFilter" placeholder="Введите название темы..." @bind-Value="FilterSettings.NameFilter"/>
                <datalist id="nameFilterList">
                    @foreach (var topicName in Topics.Select(t => t.Name))
                    {
                        <option value="@topicName"/>
                    }
                </datalist>
            </div>

            <div class="form-group">
                <label for="minRateSum" class="form-label">Минимальная сумма рейтинга</label>
                <InputNumber @bind-Value="FilterSettings.MinRateSum" class="form-control" id="minRateSum" name="minRateSum"/>
                <label for="maxRateSum" class="form-label">Максимальная сумма рейтинга</label>
                <InputNumber @bind-Value="FilterSettings.MaxRateSum" class="form-control" id="maxRateSum" name="maxRateSum"/>
            </div>

            <div class="form-group">
                <label for="minRateAverage" class="form-label">Минимальное среднее рейтинга</label>
                <InputNumber @bind-Value="FilterSettings.MinRateAverage" class="form-control" id="minRateAverage" name="minRateAverage"/>
                <label for="maxRateAverage" class="form-label">Максимальное среднее рейтинга</label>
                <InputNumber @bind-Value="FilterSettings.MaxRateAverage" class="form-control" id="maxRateAverage" name="maxRateAverage"/>
            </div>

            <div class="form-group">
                <label for="minPeopleCount" class="form-label">Минимальное число персон</label>
                <InputNumber @bind-Value="FilterSettings.MinPeopleCount" class="form-control" id="minPeopleCount" name="minPeopleCount"/>
                <label for="maxPeopleCount" class="form-label">Максимальное число персон</label>
                <InputNumber @bind-Value="FilterSettings.MaxPeopleCount" class="form-control" id="maxPeopleCount" name="maxPeopleCount"/>
            </div>
        </EditForm>
    </div>

</div>

@code {

    [Parameter]
    public IReadOnlyCollection<GetTopicDto> Topics { get; set; }

    [Parameter]
    public EventCallback<FilterSettings> OnFilterUpdate { get; set; }

    private EditContext editContext;
    public FilterSettings FilterSettings { get; set; }

    protected override async Task OnInitializedAsync()
    {
        FilterSettings = GetDefaultFilterSettings();
        editContext = new EditContext(FilterSettings);
        editContext.OnFieldChanged += EditContext_OnFieldChanged;
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        var validate = editContext.Validate();
        Console.WriteLine(string.Join("\n", editContext.GetValidationMessages()));
        Console.WriteLine(JsonSerializer.Serialize(FilterSettings));
        if (validate)
            OnFilterUpdate.InvokeAsync(FilterSettings);
    }

    public static FilterSettings GetDefaultFilterSettings()
    {
        return new()
        {
            TopicStatusFilter = new TopicStatusFilterItem[]
            {
                new(TopicStatus.Archived, false),
                new(TopicStatus.Active, true)
            }
        };
    }

}