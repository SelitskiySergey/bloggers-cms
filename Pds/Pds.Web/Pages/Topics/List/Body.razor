@page "/topics"
@attribute [Authorize]
@using static Pds.Web.Common.TitleExtension
@using Pds.Web.Common
@using Pds.Web.Common.Models.Topic
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Topic
@inherits BasePageComponent

@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Темы")</Title>

<h3 class="card-header d-flex justify-content-between align-items-center">
    Список тем
    <a href="/topics/add" class="btn btn-success">Добавить</a>
</h3>
@if (topicInfo is null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <Pagination @bind-PaginationSettings="PaginationSettings"/>
    <Filter @bind-FilterSettings="FilterSettings" Topics="topicInfo.Items"/>
    <table class="table">
        <thead>
        <tr>
            <th>Название</th>
            <th>Действия</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var topic in PaginatedTopics)
        {
            <tr>
                <td>@topic.Name</td>
                <td>
                    <Actions CurrentTopic="topic" OnTopicUpdate="RefreshTopics"/>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {

    public PaginationSettings PaginationSettings { get; set; } = new();

    public FilterSettings FilterSettings
    {
        get => filterSettings;
        set
        {
            PaginationSettings.CurrentPage = 0;
            filterSettings = value;
        }
    }

    public IEnumerable<GetTopicDto> FiltratedTopics => FilterTopics();

    public IEnumerable<GetTopicDto> PaginatedTopics => PaginateTopics();


    private GetTopicCollectionResponse topicInfo;
    private FilterSettings filterSettings = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshTopics();
    }

    private async Task RefreshTopics()
    {
        topicInfo = await GetTopicsInfo();
    }

    private async Task<GetTopicCollectionResponse> GetTopicsInfo()
    {
        return await ApiClient.Get<GetTopicCollectionResponse>(TokenProvider, "topics");
    }

    private IEnumerable<GetTopicDto> PaginateTopics()
    {
        return FiltratedTopics
            .Skip(PaginationSettings.Offset)
            .Take(PaginationSettings.PageSize);
    }

    private IEnumerable<GetTopicDto> FilterTopics()
    {
        var tempEnumerable = topicInfo.Items.Select(t => t);

        if (!string.IsNullOrEmpty(FilterSettings.NameFilter))
            tempEnumerable = tempEnumerable.Where(t => t.Name.Contains(FilterSettings.NameFilter));

        tempEnumerable = tempEnumerable
            .Where(t => FilterSettings.TopicStatusFilter
                .Any(status => status.Status == t.Status && status.IsSelected));

        if (FilterSettings.MinRateSum != null || FilterSettings.MaxRateSum != null)
        {
            tempEnumerable = tempEnumerable
                .Select(t => new
                {
                    Topic = t, RateSum = t.People
                        .Sum(p => p.Rate)
                })
                .Where(topicRateSum =>
                    (FilterSettings.MinRateSum == null
                     || topicRateSum.RateSum >= FilterSettings.MinRateSum)
                    && (FilterSettings.MaxRateSum == null
                        || topicRateSum.RateSum <= FilterSettings.MaxRateSum))
                .Select(topicRateSum => topicRateSum.Topic);
        }

        if (FilterSettings.MinRateAverage != null || FilterSettings.MaxRateAverage != null)
        {
            tempEnumerable = tempEnumerable
                .Select(t => new
                {
                    Topic = t, RateAverage =
                        t.People.Count == 0
                            ? 0
                            : t.People.Average(person => person.Rate)
                })
                .Where(topicRateAverage =>
                    (FilterSettings.MinRateAverage == null
                     || topicRateAverage.RateAverage >= FilterSettings.MinRateAverage)
                    && (FilterSettings.MaxRateAverage == null
                        || topicRateAverage.RateAverage <= FilterSettings.MaxRateAverage))
                .Select(topicRateAverage => topicRateAverage.Topic);
        }

        if (FilterSettings.MinPeopleCount != null || FilterSettings.MaxPeopleCount != null)
        {
            tempEnumerable = tempEnumerable
                .Select(t => new {Topic = t, PeopleCount = t.People.Count})
                .Where(topicPeopleCount =>
                    (FilterSettings.MinPeopleCount == null
                     || topicPeopleCount.PeopleCount >= FilterSettings.MinPeopleCount)
                    && (FilterSettings.MaxPeopleCount == null
                        || topicPeopleCount.PeopleCount <= FilterSettings.MaxPeopleCount))
                .Select(topicPeopleCount => topicPeopleCount.Topic);
        }

        var filteredList = tempEnumerable.ToList();
        PaginationSettings.Total = filteredList.Count;
        return filteredList;
    }

}