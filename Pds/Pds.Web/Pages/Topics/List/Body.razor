@page "/topics"
@using static Common.TitleExtension
@using Pds.Web.Common
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Paging
@using Pds.Api.Contracts.Topic
@using Pds.Core.Enums
@using Pds.Web.Components.Sorting.QueryCreators.Topic
@using Pds.Web.Components.Sorting.QueryCreators
@using System.Linq
@using Pds.Web.Components.Search.Person
@using Pds.Web.Pages.Content
@inherits BasePageComponent

@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Темы")</Title>

@if (topicsInfo is null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <h4 class="card-header d-flex justify-content-between align-items-center">
        <span>
            Список тем
            <span class="title-overall-info">
                @{ var overallCount = $"{topicsList.Length} шт.";}
                @overallCount
            </span> 
        </span>
        <a href="/topics/add" class="btn btn-success">Добавить</a>
    </h4>

    <Filter OnSearch="@OnSearch" />

    <table class="table">
        <thead>
            <tr>
                <th>
                    <SortingComponent TField="TopicsFieldName"
                                      OnSortColumn="SortTopics"
                                      FieldName="TopicsFieldName.Name"> Название </SortingComponent>
                </th>
                <th>
                    <SortingComponent TField="TopicsFieldName"
                                      OnSortColumn="SortTopics"
                                      FieldName="TopicsFieldName.Status"> Статус </SortingComponent>
                </th>
                <th class="text-center actions-header">Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var topic in topicsList)
            {
                <tr class="@TopicsHelper.GetBgColorClass(topic.Status)">
                    <td>
                        <td class="topic-row">
                            <a class="custom-link" href="topics/@topic.Id">@topic.Name</a>
                            <span class="contents">
                                (@topic.Persons.Count)
                            </span>
                        </td>
                    </td>
                    <td>@EnumsTranslator.TopicStatusToRu(topic.Status)</td>
                    <td class="text-center">
                        <Actions OnTopicUpdate="@TopicsInfoUpdate" CurrentTopic="@topic" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <CascadingValue Value="isPagingStateHasChanged">
        <PagingComponent PageSizeList="@pageSizesList"
                         DefaultPageSize="@defaultPageSize"
                         TotalItems="totalElements"
                         Radius="2"
                         Pagination="Pagination" />
    </CascadingValue>
}

@code {
    private GetTopicsResponse topicsInfo;
    private TopicDto[] topicsList;
    private static readonly int[] pageSizesList = { 10, 30, 50, 100 };
    private readonly int defaultPageSize = pageSizesList[1];
    private int totalElements;
    private bool isPagingStateHasChanged;
    private PageSettings pageSettings;
    private OrderSetting<TopicsFieldName>[] orderSettings;
    private SearchSettings searchSettings;

    protected override async Task OnInitializedAsync()
    {
        pageSettings = new PageSettings
        {
            Limit = pageSizesList[0],
            Offset = 0
        };

        orderSettings = new[]
        {
            new OrderSetting<TopicsFieldName>()
        };

        searchSettings = new SearchSettings
        {
            Search = string.Empty
        };

        await TopicsInfoUpdate();
    }

    private async Task TopicsInfoUpdate()
    {
        topicsInfo = await GetTopicsInfoAsync();
        SetDefaultPaging();
        GetTopicsList();
    }

    private async Task<GetTopicsResponse> GetTopicsInfoAsync()
    {
        return await ApiClient.Get<GetTopicsResponse>(TokenProvider, "topics");
    }

    private void GetTopicsList()
    {
        var query = topicsInfo.Items
            .AsQueryable();

        //Sorting
        if (orderSettings?.Length > 0)
        {
            var dictionary = new Dictionary<TopicsFieldName, IOrderQuery<TopicDto, TopicDto>>
            {
                {TopicsFieldName.Name, new TopicNameOrderQueryCreator()},
                {TopicsFieldName.Status, new TopicStatusOrderQueryCreator()}
            };

            var queryCreator = new OrderQueryCreator<TopicDto, TopicsFieldName>(dictionary);
            query = queryCreator.Create(orderSettings, query);
        }
        else
        {
            query = query
                .OrderBy(p => p.Name);
        }

        //Search
        var searchLine = searchSettings.Search?.ToLower();
        if (!string.IsNullOrWhiteSpace(searchLine))
        {
            var searchPredicate = new TopicsSearch().GetSearchPredicate(searchLine);
            topicsList = query.Where(searchPredicate).ToArray();
        }
        else
        {
            topicsList = query.ToArray();
        }

        //Paging
        totalElements = topicsList.ToArray().Length;
        topicsList = topicsList
            .Skip(pageSettings.Offset)
            .Take(pageSettings.Limit)
            .ToArray();
    }

    private void Pagination(PagingEventArgs settings)
    {
        isPagingStateHasChanged = default;
        pageSettings = new PageSettings
        {
            Limit = settings.PageSize,
            Offset = settings.PageOffSet
        };

        GetTopicsList();
    }

    private void SortTopics(OrderSetting<TopicsFieldName> settings)
    {
        SetDefaultPaging();
        orderSettings = new[]
        {
            settings
        };

        GetTopicsList();
    }

    private void OnSearch(string searchText)
    {
        SetDefaultPaging();
        searchSettings.Search = searchText;
        GetTopicsList();
    }

    private void SetDefaultPaging()
    {
        isPagingStateHasChanged = true;
        pageSettings.Offset = 0;
        pageSettings.Limit = defaultPageSize;
    }
}