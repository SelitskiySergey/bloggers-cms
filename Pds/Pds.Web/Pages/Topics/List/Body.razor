@page "/topics"
@attribute [Authorize]
@using static Pds.Web.Common.TitleExtension
@using Pds.Web.Common
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Topic
@using Pds.Web.Common.Models.Topic

@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Темы")</Title>

<h3 class="card-header d-flex justify-content-between align-items-center">
    Список тем
    <a href="/topics/add" class="btn btn-success">Добавить</a>
</h3>
@if (response is null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <Filter OnFilterUpdate="FilterUpdatedAsync" Topics="response.Items"/>
    <table class="table">
        <thead>
        <tr>
            <th>Название</th>
            <th>Действия</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var topic in FiltratedTopics)
        {
            var elementId = $"topic_{topic.Id}";
            <tr>
                <td>@topic.Name</td>
                <td>
                    <Actions CurrentTopic="topic"/>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    public IEnumerable<GetTopicDto> FiltratedTopics { get; set; }
    private GetTopicCollectionResponse response;

    protected override async Task OnInitializedAsync()
    {
        response = await GetTopicsInfo();
        FiltratedTopics = response.Items;
    }

    private async Task<GetTopicCollectionResponse> GetTopicsInfo()
    {
        return await ApiClient.Get<GetTopicCollectionResponse>(TokenProvider, "topics");
    }

    private void FilterUpdated(FilterSettings filterSettings)
    {
        var tempEnumerable = response.Items.Select(t => t);

        if (!string.IsNullOrEmpty(filterSettings.NameFilter))
            tempEnumerable = tempEnumerable.Where(t => t.Name.Contains(filterSettings.NameFilter));

        tempEnumerable = tempEnumerable
            .Where(t => filterSettings.TopicStatusFilter
                .Any(status => status.Status == t.Status && status.IsSelected));
        
        if (filterSettings.MinRateSum != null || filterSettings.MaxRateSum != null)
        {
            tempEnumerable = tempEnumerable
                .Select(t => new {Topic = t, RateSum = t.People
                    .Sum(p => p.Rate)})
                .Where(topicRateSum =>
                (filterSettings.MinRateSum == null 
                    || topicRateSum.RateSum >= filterSettings.MinRateSum)
                && (filterSettings.MaxRateSum == null
                    || topicRateSum.RateSum <= filterSettings.MaxRateSum))
                .Select(topicRateSum => topicRateSum.Topic);
        }
        
        if (filterSettings.MinRateAverage != null || filterSettings.MaxRateAverage != null)
        {
            tempEnumerable = tempEnumerable
                .Select(t => new {Topic = t, RateAverage = 
                    t.People.Count == 0 
                        ? 0 
                        : t.People.Average(person => person.Rate )})
                .Where(topicRateAverage =>
                    (filterSettings.MinRateAverage == null 
                     || topicRateAverage.RateAverage >= filterSettings.MinRateAverage)
                    && (filterSettings.MaxRateAverage == null
                        || topicRateAverage.RateAverage <= filterSettings.MaxRateAverage))
                .Select(topicRateAverage => topicRateAverage.Topic);
        }
        
        if (filterSettings.MinPeopleCount != null || filterSettings.MaxPeopleCount != null)
        {
            tempEnumerable = tempEnumerable
                .Select(t => new {Topic = t, PeopleCount = t.People.Count})
                .Where(topicPeopleCount =>
                    (filterSettings.MinPeopleCount == null 
                     || topicPeopleCount.PeopleCount >= filterSettings.MinPeopleCount)
                    && (filterSettings.MaxPeopleCount == null
                        || topicPeopleCount.PeopleCount <= filterSettings.MaxPeopleCount))
                .Select(topicPeopleCount => topicPeopleCount.Topic);
        }

        FiltratedTopics = tempEnumerable;
    }
}