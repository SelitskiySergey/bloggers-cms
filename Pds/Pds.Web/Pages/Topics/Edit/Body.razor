@page "/topics/edit/{Id}"
@attribute [Authorize]
@using static Common.TitleExtension
@using Pds.Web.Common
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Topic
@using Pds.Api.Contracts.Person
@using Pds.Core.Enums
@inherits BasePageComponent

@inject NavigationManager NavigationManager
@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Редактирование темы")</Title>

<h3 class="card-header d-flex justify-content-between align-items-center">
    Редактирование темы
    <a class="btn btn-primary" @onclick="GoBack"> Назад </a>
</h3>
@if (request is null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <EditForm EditContext="@editContext" OnSubmit="@HandleSubmitAsync">
        <div class="form-group">
            <label for="name" class="form-label">Имя</label>
            <InputText class="form-control" id="name" @bind-Value="request.Name"/>
        </div>

        <div class="form-group">
            <label class="form-label">Статус</label>
                @foreach (var statusType in Enum.GetValues<TopicStatus>())
                {              
                    var elementId = $"status_{statusType}";

                    <div class="form-check form-switch">
                    <label for="@elementId" class="form-check-label">
                        @EnumsTranslator.TopicStatusToRu(statusType)
                    </label>
                    @if (statusType == request.Status)
                    {
                        
                        <input
                            type="radio"
                            name="status"
                            class="form-check-input"
                            value="@statusType.ToString()"
                            id="@elementId"
                            @onclick="@(() => request.Status = statusType)"
                            checked>
                    }
                    else
                    {
                        <input
                            type="radio"
                            name="status"
                            class="form-check-input"
                            value="@statusType.ToString()"
                            id="@elementId"
                            @onclick="@(() => request.Status = statusType)">
                    }
            </div>
                }
        </div>
        
        <div class="form-group" id="people">
            <label class="form-label topic-links">Персоны:</label>
            <PersonTopicSelectTable OnPersonUpdate="() => RefreshPeopleCheckBoxAsync()" People="@checkBoxPeople"></PersonTopicSelectTable>
        </div>

        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group d-grid gap-2 d-md-flex justify-content-md-end">
            <button type="submit" class="btn btn-success" disabled="@isCreateButtonDisabled">Сохранить изменения</button>
        </div>
    </EditForm>
}

@code {
    List<CheckBoxPersonDto> checkBoxPeople;
    private UpdateTopicRequest request;
    private EditContext editContext;
    private bool isCreateButtonDisabled;
    private GetTopicResponse topicResponse;

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isCreateButtonDisabled = false;
        topicResponse = await GetTopicResponseAsync();
        if (topicResponse is null)
        {
            NavigationManager.NavigateTo("/topics");
            return;
        }
        request = new UpdateTopicRequest
        {
            Name = topicResponse.Name,
            Status = topicResponse.Status
        };
        editContext = new EditContext(request);
        await RefreshPeopleCheckBoxAsync();
    }

    private async Task RefreshPeopleCheckBoxAsync()
    {
        checkBoxPeople = await GetPersonResponseAsync();
    }
    
    private async Task HandleSubmitAsync()
    {
        var isValid = editContext.Validate();

        if (isValid)
        {
            isCreateButtonDisabled = true;

            request.People = checkBoxPeople
                .Where(p => p.IsSelected)
                .Select(cbp => cbp.Id)
                .ToList();
            _ = await ApiClient.Put<object, UpdateTopicRequest>(TokenProvider, $"topics/{{{Id}}}", request);

            NavigationManager.NavigateTo("/topics");
        }
    }

    private async Task<GetTopicResponse> GetTopicResponseAsync()
    {
        return await ApiClient.Get<GetTopicResponse>(TokenProvider, $"topics/{{{Id}}}");
    }

    private async Task<List<CheckBoxPersonDto>> GetPersonResponseAsync()
    {
        var response =  await ApiClient.Get<GetPersonsResponse>(TokenProvider, "persons/");
        return response.Items
            .Select(p =>
                new CheckBoxPersonDto(p)
                {
                    IsSelected = topicResponse.People
                        .Any(personDto => p.Id == personDto.Id)
                })
            .ToList();
    }
}