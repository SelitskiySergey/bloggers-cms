@using Pds.Web.Components.Sorting.QueryCreators.Person
@using Pds.Web.Pages.Content
@using Pds.Api.Contracts.Person
@using Pds.Api.Contracts.Paging
@using Pds.Web.Pages.Persons.List;
@using Pds.Web.Common
@using Pds.Web.Components.Sorting.QueryCreators
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager NavigationManager
@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<div class="row">
        <div class="col-7">
            <CascadingValue Value="isPagingStateHasChanged">
                <PagingComponent PageSizeList="pageSizesList"
                                 TotalItems="totalElements"
                                 Radius="2"
                                 Pagination="Pagination" />
            </CascadingValue>
        </div>
        <div class="col-5">
            <Pds.Web.Components.Search.SearchComponent Search="SearchPerson"/>
        </div>    
    </div>
    

    <table class="table">
        <thead>
            <tr>
                <th class="person-header">
                    <SortingComponent TField="PersonsFieldName"
                                      OnSortPersons="SortPersons"
                                      FieldName="PersonsFieldName.FullName">Кто</SortingComponent>
                
                </th>
                <th class="rate-header">
                    <SortingComponent TField="PersonsFieldName"
                                      OnSortPersons="SortPersons"
                                      FieldName="PersonsFieldName.Rating">Рейтинг</SortingComponent>
                </th>
                <th>
                    <SortingComponent TField="PersonsFieldName"
                                      OnSortPersons="SortPersons"
                                      FieldName="PersonsFieldName.Location">Где</SortingComponent>
                </th>
                <th>Информация</th>
                <th>Ссылки</th>
                <th class="text-center actions-header">Действия</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var person in Result)
        {
            <tr class="@PersonsHelper.GetBgColorClass(person.Status)">
                <td class="person-row">
                    @person.FullName
                    <span class="contents">
                        (@person.Contents.Count)
                    </span>
                </td>
                <td class="rate-row">@person.Rate</td>
                <td>@person.Location</td>
                <td>@person.Info</td>
                <td>
                    @foreach (var resource in person.Resources)
                    {
                        <div>
                            <a href="@resource.Url" target="_blank">@resource.Name</a>
                        </div>
                    }
                </td>
                <td class="text-center">
                    <Actions OnPersonUpdate="PersonsInfoUpdate" CurrentPerson="@person"></Actions>
                </td>
            </tr>
        }
        </tbody>
        </table>
@code {
    [Parameter]
    public IReadOnlyCollection<PersonDto> People { get; set; }

    private IEnumerable<PersonDto> Result { get; set; }

    private readonly int[] pageSizesList = { 5, 10, 25, 50 };
    private int totalElements;
    private bool isPagingStateHasChanged;
    private PageSettings pageSettings;
    private OrderSetting<PersonsFieldName>[] orderSettings;
    private FilterSettings filterSettings;


    protected override async Task OnInitializedAsync()
    {
        pageSettings = new PageSettings
        {
            Limit = pageSizesList[0],
            Offset = 0
        };

        orderSettings = new[]
        {
            new OrderSetting<PersonsFieldName>()
        };

        filterSettings = new FilterSettings
        {
            Search = string.Empty
        };

        await PersonsInfoUpdate();
        ApplySettings();

    }

    private Task PersonsInfoUpdate()
    {
        ApplySettings();
        return Task.CompletedTask;
    }

    public void ApplySettings()
    {
        var query = People
            .AsQueryable();
        
        var searchLine = filterSettings.Search.ToLower();

        if (query.Any(x => x.Location.ToLower().Contains(searchLine)))
            query = query.Where(x => x.Location.ToLower().Contains(searchLine));
        else if (query.Any(x => x.FullName.ToLower().Contains(searchLine)))
            query = query.Where(x => x.FullName.ToLower().Contains(searchLine));
        else if (query.Any(x => x.Info.ToLower().Contains(searchLine)))
            query = query.Where(x => x.Info.ToLower().Contains(searchLine));
        
        if (orderSettings?.Length > 0)
        {
            var dictionary = new Dictionary<PersonsFieldName, IOrderQuery<PersonDto, PersonDto>>
            {
                {PersonsFieldName.FullName, new PersonFullNameOrderQueryCreator()},
                {PersonsFieldName.Rating, new PersonRatingOrderQueryCreator()},
                {PersonsFieldName.Location, new PersonLocationOrderQueryCreator()}
            };

            var queryCreator = new OrderQueryCreator<PersonDto, PersonsFieldName>(dictionary);
            query = queryCreator.Create(orderSettings, query);
        }
        else
        {
            query = query
                .OrderByDescending(p => p.Rate)
                .ThenBy(p => p.FullName);
        }

        var resultCollection = query.ToArray();
        totalElements = resultCollection.Length;
        
        Result = resultCollection.Skip(pageSettings.Offset).Take(pageSettings.Limit).ToArray();
    }

    private void Pagination(PagingEventArgs settings)
    {
        isPagingStateHasChanged = default;
        pageSettings = new PageSettings
        {
            Limit = settings.PageSize,
            Offset = settings.PageOffSet
        };

        ApplySettings();
    }

    private void SortPersons(OrderSetting<PersonsFieldName> settings)
    {
        isPagingStateHasChanged = true;
        pageSettings.Offset = 0;

        orderSettings = new[]
        {
            settings
        };

        ApplySettings();
    }

    private void SearchPerson(string searchText)
    {
        isPagingStateHasChanged = true;
        pageSettings.Offset = 0;

        filterSettings.Search = searchText;

        ApplySettings();
    }
}