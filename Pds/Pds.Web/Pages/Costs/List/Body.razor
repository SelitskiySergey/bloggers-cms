@page "/costs"
@inherits BasePageComponent
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Cost
@using Pds.Core.Extensions
@using Pds.Web.Common
@using Pds.Web.Models.Cost
@using static Pds.Web.Common.TitleExtension 

@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Расходы")</Title>


@if (costsInfo == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <h4 class="card-header d-flex justify-content-between align-items-center">
        <span>
        Список расходов
            <span class="title-overall-info">
                @($"{costsInfo.Items.Count(i => i.IsVisible)} шт. /  $" +
                  $"{costsInfo.Items.Where(i => i.IsVisible).Sum(i => i.Value):N0}")
            </span> 
        </span>
        <a href="/costs/add" class="btn btn-success" >Добавить</a>
    </h4>
    <Filter OnFilterUpdate="@FilterUpdated"></Filter>
    <table class="table">
        <thead>
        <tr>
            <th class="paid-date-header">Когда</th>
            <th class="id-header">ID</th>
            <th class="cost-value-header">Сколько</th>
            <th class="cost-type-header">Тип</th>
            <th class="cost-type-header">Бренд</th>
            <th>Комментарий</th>
            <th class="text-center actions-header">Действия</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var cost in costsInfo.Items.Where(i => i.IsVisible))
        {
            <tr>
                <td class="paid-date-row">
                    <span>
                        @cost.PaidAt.Date.ToString("dd.MM.yyyy")
                    </span>
                </td>
                <td>
                    <a class="custom-link" href="costs/@cost.Id">
                        <span class="id-row">
                            @cost.Id.ToShortString()
                        </span>
                    </a>
                </td>
                <td class="cost-value-row">
                    <span>@cost.Value.ToString("N0")</span>
                </td>
                <td>
                    @EnumsTranslator.CostTypeToRu(cost.Type)
                </td>
                <td>@cost.Brand.Name</td>
                <td>
                    @if (cost.Content != null)
                    {
                        <div>
                            Контент: <a class="custom-link" href="content/@cost.Content.Id">@cost.Content.Title</a>
                        </div>
                    }
                    @cost.Comment
                </td>
                <td class="text-center">
                    <Actions OnCostUpdate="@CostsInfoUpdate" CurrentCost="@cost"></Actions>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private GetCostsResponse costsInfo;
    private FilterSettings lastFilterSettings;

    protected override async Task OnInitializedAsync()
    {
        costsInfo = await GetCostsInfo();
    }

    private async Task CostsInfoUpdate()
    {
        costsInfo = await GetCostsInfo();
        FilterUpdated(lastFilterSettings);
    }

    private async Task<GetCostsResponse> GetCostsInfo()
    {
        return await ApiClient.Get<GetCostsResponse>(TokenProvider, "costs");
    }

    private void FilterUpdated(FilterSettings filterSettings)
    {
        lastFilterSettings = filterSettings;
        var selectedCostTypes = filterSettings.CostTypeFilterItems
            .Where(i => i.IsSelected)
            .Select(i => i.CostType)
            .ToList();
        var selectedBrandsIds = filterSettings.BrandFilterItems
            .Where(i => i.IsSelected)
            .Select(i=>i.Id)
            .ToList();
        var totalSelectedFiltersCount = 
            selectedCostTypes.Count + 
            selectedBrandsIds.Count;

        var itemsToShow = costsInfo.Items
            .Where(i =>
                (selectedCostTypes.Contains(i.Type) || selectedCostTypes.Count == 0) &&
                (selectedBrandsIds.Contains(i.Brand.Id)  || selectedBrandsIds.Count == 0) &&
                (filterSettings.From != null && i.PaidAt.Date >= filterSettings.From.Value.Date || filterSettings.From == null) &&
                (filterSettings.To != null && i.PaidAt.Date <= filterSettings.To.Value.Date || filterSettings.To == null));

        foreach (var item in costsInfo.Items)
        {
            if (totalSelectedFiltersCount == 0)
            {
                item.IsVisible = true;
                continue;
            }

            item.IsVisible = itemsToShow.Contains(item);
        }
    }
}