@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Core.Enums
@using Pds.Web.Common
@using Microsoft.AspNetCore.Components
@using AutoMapper
@using Pds.Api.Contracts
@using Pds.Api.Contracts.Brand
@using Pds.Core
@using Pds.Web.Models.Cost
@using Pds.Web.Pages.Clients.Info

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider
@inject IApiClient ApiClient
@inject IMapper Mapper
@inject StateContainer StateContainer

@if (brands == null || StateContainer.Settings == null)
{
    <p>
        <em>Загрузка фильтр...</em>
    </p>
}
else
{
    <div class="filter">
        <EditForm EditContext="@editContext">
            <div class="form-group no-wrap">
                <span class="filter-row-title">Бренд:</span>
                @foreach (var brandFilterItem in filterSettings.BrandFilterItems)
                {
                    var id = $"sm_type_{brandFilterItem.Id.ToString()}";
                    <InputCheckbox name="@id" class="btn-check" @bind-Value="brandFilterItem.IsSelected" Id="@id"/>
                    <label class="btn btn-secondary" for="@id">
                        @brandFilterItem.Name
                    </label>
                }
            </div>
            <div class="form-group no-wrap">
                <span class="filter-row-title">Тип расхода:</span>
                @foreach (var costTypeFilterItem in filterSettings.CostTypeFilterItems)
                {
                    var id = $"cost_type_{costTypeFilterItem.CostType.ToString()}";
                    <InputCheckbox name="@id" class="btn-check" @bind-Value="costTypeFilterItem.IsSelected" Id="@id"/>
                    <label class="btn btn-secondary" for="@id">
                        @EnumsTranslator.CostTypeToRu(costTypeFilterItem.CostType)
                    </label>
                }
            </div>

            <div class="form-group no-wrap">
                <span class="filter-row-title">Когда:</span>
                <InputDate class="form-control from-date" id="from_date" @bind-Value="filterSettings.From"/>
                <span class="filter-date-separator">&lt; с | по &gt; </span>
                <InputDate class="form-control to-date" id="to_date" @bind-Value="filterSettings.To"/>
            </div>
        </EditForm>
    </div>
}

@code {

    [Parameter]
    public EventCallback<FilterSettings> OnFilterUpdate { get; set; }

    private EditContext editContext;
    private FilterSettings filterSettings { get; set; }
    private List<BrandDto> brands { get; set; }

    protected override async Task OnInitializedAsync()
    {
        brands = await GetBrands();
        filterSettings = GetFilterSettings(brands);
        editContext = new EditContext(filterSettings);
        editContext.OnFieldChanged += EditContext_OnFieldChanged;
        await OnFilterUpdate.InvokeAsync(filterSettings);
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        OnFilterUpdate.InvokeAsync(filterSettings);
    }

    private FilterSettings GetFilterSettings(List<BrandDto> brands)
    {
        var filter = new FilterSettings
        {
            CostTypeFilterItems = ((CostType[]) Enum.GetValues(typeof(CostType)))
                .Select(cType =>
                    new CostTypeFilterItem
                    {
                        CostType = cType,
                        IsSelected = false
                    })
                .ToList(),
            BrandFilterItems = Mapper.Map<List<BrandFilterItem>>(brands)
        };
        
        SetDefaultFilterValues(filter, brands);

        return filter;
    }

    private void SetDefaultFilterValues(FilterSettings filter, List<BrandDto> brands)
    {
        // Set default brand
        var defaultBrand = brands.FirstOrDefault(b => b.IsDefault);
        if (defaultBrand != null)
        {
            filter.BrandFilterItems.First(b => b.Id == defaultBrand.Id).IsSelected = true;
        }
        
        // Set default "from" filter value
        var fromFilterDateString = StateContainer.Settings.GetByKey(SettingsKeys.FilterCostsDateFrom);
        if (DateTime.TryParse(fromFilterDateString, out var fromFilterDate))
        {
            filter.From = fromFilterDate;
        }
    }

    private async Task<List<BrandDto>> GetBrands()
    {
        return await ApiClient.Get<List<BrandDto>>(TokenProvider, "content/get-brands");
    }
}