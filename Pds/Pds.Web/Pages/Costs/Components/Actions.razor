@using Pds.Core.Enums
@using Pds.Web.Common
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Controllers.Cost
@using Pds.Core.Extensions

@namespace Pds.Web.Pages.Costs.Components

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<div class="panel panel-default actions-panel">
    @if (CurrentCost.Status == CostStatus.Active)
    {
        <button title="Редактировать" class="btn btn-primary btn-sm" @onclick="OnEdit">
            <i class="bi bi-pencil-fill"></i>
        </button>
    }

    @if (CurrentCost.Status == CostStatus.Archived)
    {
        <button title="Разархивировать" class="btn btn-success btn-sm" @onclick="OnUnarchiveAsync">
            <i class="bi bi-patch-plus-fill"></i>
        </button>
    }

    @if (CurrentCost.Status == CostStatus.Active)
    {
        <button title="Архивировать" class="btn btn-warning btn-sm" @onclick="OnArchiveAsync">
            <i class="bi bi-archive-fill"></i>
        </button>
    }

    @if (CurrentCost.Status == CostStatus.Active)
    {
        <button title="Удалить" class="btn btn-danger btn-sm delete-button" @onclick="OnDeleteAsync">
            <i class="bi bi-trash-fill"></i>
        </button>
    }
</div>

@code {
    [Parameter]
    public EventCallback OnActionsUpdate { get; set; }
    [Parameter]
    public IActionsCost CurrentCost { get; set; }

    private void OnEdit()
    {
        NavigationManager.NavigateTo($"/costs/{CurrentCost.Id}/edit");
    }

    private async Task OnDeleteAsync()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Уверены, что хотите удалить {CurrentCost.Id}?");
        if (confirmed)
        {
            await ApiClient.Delete<object>(TokenProvider, $"costs/{CurrentCost.Id}");
            await OnActionsUpdate.InvokeAsync(); // Update UI
        }
    }

    private async Task OnArchiveAsync()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Уверены, что хотите архивировать {CurrentCost.Id}?");
        if (confirmed)
        {
            await ApiClient.Put<object, object>(TokenProvider, $"costs/{CurrentCost.Id}/archive", null);
            await OnActionsUpdate.InvokeAsync(); // Update UI
        }
    }

    private async Task OnUnarchiveAsync()
    {
        await ApiClient.Put<object, object>(TokenProvider, $"costs/{CurrentCost.Id}/unarchive", null);
        await OnActionsUpdate.InvokeAsync(); // Update UI
    }
}