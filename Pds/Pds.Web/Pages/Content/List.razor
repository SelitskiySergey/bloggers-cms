@page "/content"
@attribute [Authorize] 
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@using Pds.Api.Contracts.Content
@using Pds.Api.Contracts.Person

@inject HttpClient Http
@inject IConfiguration Configuration
@inject IAccessTokenProvider TokenProvider

<h3 class="card-header d-flex justify-content-between align-items-center">
    Лента контента
    <a href="/content/add" class="btn btn-success" >Добавить</a>
</h3>
@if (content == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Название</th>
            <th>Тип</th>
            <th>Соцсеть</th>
            <th>Когда</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in content.Items)
        {
            <tr>
                <td>
                    @item.Title 
                </td>
                <td>
                    @item.Type.ToString()
                </td>
                <td>
                    @item.SocialMediaType.ToString()
                </td>
                <td>
                    @item.ReleaseDateUtc
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private GetContentResponse content;

    protected override async Task OnInitializedAsync()
    {
        var backendApiUrl = Configuration["BackendApi:Url"];
        using var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"{backendApiUrl}/api/content");
        var tokenResult = await TokenProvider.RequestAccessToken();

        if (tokenResult.TryGetToken(out var token)) {
            requestMessage.Headers.Authorization = 
                new AuthenticationHeaderValue("Bearer", token.Value);
            var response = await Http.SendAsync(requestMessage);
            content = await response.Content.ReadFromJsonAsync<GetContentResponse>();
        }
    }
}