@page "/content"
@inherits BasePageComponent
@using Pds.Api.Contracts.Content
@using Pds.Web.Common
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using static Pds.Web.Common.TitleExtension 
@using System.Linq
@using Pds.Api.Contracts.Content.GetContents
@using Pds.Core.Extensions
@using Pds.Web.Components.Search.Content
@using Pds.Web.Components.Search.Gift
@using Pds.Web.Models.Content
@using Pds.Web.Models.Gift
@using FilterSettings = Pds.Web.Models.Content.FilterSettings
@using BrandFilterItem = Pds.Web.Models.Content.BrandFilterItem

@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Контент")</Title>

@if (contentsInfo == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <h4 class="card-header d-flex justify-content-between align-items-center">
        <span>
            Лента контента 
            <span class="title-overall-info">
                            @{ var overallCount = $"{totalElements} шт.";}
                            @overallCount
                        </span> 
        </span>
        <a href="/content/add" class="btn btn-success">Добавить</a>
    </h4>
    <Filter OnFilterUpdate="@FilterUpdated" OnSearch="@OnSearch"></Filter>
    <table class="table">
        <thead>
        <tr>
            <th class="release-date-header">Когда</th>
            <th>Название</th>
            <th>Бренд</th>
            <th>Клиент</th>
            <th>Соцсеть</th>
            <th>Тип</th>
            <th class="bill-cost-header">Сколько</th>
            <th class="text-center actions-header">Действия</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in contentsList)
        {
            <tr class="@ContentHelper.GetContentBgColorClass(item.Status, item.Bill)">
                <td class="release-date-row">
                    @if (item.EndDate != null)
                    {
                        <div>
                            <span class=" no-wrap">
                                @item.EndDate.Value.Date.ToShortStringDateWithDay()
                            </span>
                        </div>
                    }
                    <div>
                        <span class=" no-wrap">
                            @item.ReleaseDate.Date.ToShortStringDateWithDay()
                        </span>
                    </div>
                </td>
                <td class="title-row">
                    <a class="custom-link" href="content/@item.Id">@item.Title</a>
                </td>
                <td>
                    @item.Brand.Name
                </td>
                <td>
                    @item.ClientName
                </td>
                <td>
                    @EnumsTranslator.SocialMediaTypeToRu(item.SocialMediaType)
                </td>
                <td>
                    @EnumsTranslator.ContentTypeToRu(item.Type)
                </td>
                <td class="bill-cost-row">
                    @if (item.Bill != null)
                    {
                        if (item.Bill.PaymentType != null)
                        {
                            <i class="@ContentHelper.GetPaymentTypeBgColorClass(item.Bill.PaymentType)">
                                @EnumsTranslator.PaymentTypeToShortRu(item.Bill.PaymentType)
                            </i>
                        }
                        <span>@item.Bill.Value.ToString("N0")</span> 
                    }
                    else
                    {
                        <span class="free-cost">бесплатно</span> 
                    }
                </td>
                <td class="text-center actions-row">
                    <Actions OnContentUpdate="@ContentsInfoUpdate" CurrentContent="@item"></Actions>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private GetContentsResponse contentsInfo;
    private GetContentsContentDto[] contentsList;
    private ContentsPageSearchSettings searchSettings;
    private FilterSettings filterSettings;    
    private int totalElements;

    protected override async Task OnInitializedAsync()
    {
        searchSettings = new ContentsPageSearchSettings
        {
            Search = string.Empty
        };

        filterSettings = new FilterSettings
        {
            BrandFilterItems = new List<BrandFilterItem>(),
            SocialMediaFilterItems = new List<SocialMediaFilterItem>(),
            ContentTypeFilterItems = new List<ContentTypeFilterItem>()
        };

        await ContentsInfoUpdate();
    }

    private async Task ContentsInfoUpdate()
    {
        contentsInfo = await GetGiftsInfoAsync();
        //SetDefaultPaging();
        FilterUpdated(filterSettings);
    }

    private async Task<GetContentsResponse> GetGiftsInfoAsync()
    {
        return await ApiClient.Get<GetContentsResponse>(TokenProvider, "content");
    }

    private void GetContentsList()
    {
        //Filtering
        var selectedSocialMediaTypes = filterSettings.SocialMediaFilterItems
            .Where(i => i.IsSelected)
            .Select(i => i.SocialMediaType)
            .ToList();
        var selectedContentTypes = filterSettings.ContentTypeFilterItems
            .Where(i => i.IsSelected)
            .Select(i => i.ContentType)
            .ToList();
        var selectedBrandsIds = filterSettings.BrandFilterItems
            .Where(i => i.IsSelected)
            .Select(i=>i.Id)
            .ToList();

        var itemsToShow = contentsInfo.Items
            .Where(i => 
                (selectedSocialMediaTypes.Contains(i.SocialMediaType) || selectedSocialMediaTypes.Count == 0) &&
                (selectedContentTypes.Contains(i.Type) || selectedContentTypes.Count == 0) &&
                (selectedBrandsIds.Contains(i.Brand.Id)  || selectedBrandsIds.Count == 0));

        var query = itemsToShow
            .AsQueryable();
        
        //Sorting
        query = query
            .OrderByDescending(g => g.ReleaseDate);
        
        //Search
        var searchLine = searchSettings.Search?.ToLower();
        if (!string.IsNullOrWhiteSpace(searchLine))
        {
            var searchPredicate = new ContentsSearch().GetSearchPredicate(searchLine);
            query = query.Where(searchPredicate);
        }
        
        contentsList = query.ToArray();
        totalElements = contentsList.Length;
    }
    
    private void OnSearch(string searchText)
    {
        //SetDefaultPaging();
        searchSettings.Search = searchText;
        GetContentsList();
    }

    private void FilterUpdated(FilterSettings filterSettings)
    {
        this.filterSettings = filterSettings;
        // SetDefaultPaging();
        GetContentsList();
    }
}