@page "/content"
@attribute [Authorize]
@using Pds.Api.Contracts.Content
@using Pds.Web.Common
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Core.Enums
@using static Pds.Web.Common.TitleExtension 

@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Контент")</Title>

<h3 class="card-header d-flex justify-content-between align-items-center">
    Лента контента
    <a href="/content/add" class="btn btn-success" >Добавить</a>
</h3>
@if (content == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th class="release-date-header">Когда</th>
            <th>Название</th>
            <th>Клиент</th>
            <th>Соцсеть</th>
            <th>Тип</th>
            <th class="bill-cost-header">Сколько</th>
            <th class="text-center actions-header">Действия</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in content.Items)
        {
            <tr class="@GetRowClass(item.Status, item.BillStatus)">
                <td class="release-date-row">
                    <span>
                        @item.ReleaseDateUtc.Date.ToString("dd.MM")
                    </span>
                </td>
                <td>
                    @item.Title
                </td>
                <td>
                    @item.ClientName
                </td>
                <td>
                    @EnumsTranslator.SocialMediaTypeToRu(item.SocialMediaType)
                </td>
                <td>
                    @EnumsTranslator.ContentTypeToRu(item.Type)
                </td>
                <td class="bill-cost-row">
                    @if (item.PaymentType != null)
                    {
                        <i class="@GetPaymentTypeClass(item.PaymentType)">@EnumsTranslator.PaymentTypeToShortRu(item.PaymentType)</i>
                    }

                    <span>@item.BillCost.ToString("N0")</span> 
                </td>
                <td class="text-center actions-row">
                    <Actions OnContentUpdate="@ContentInfoUpdate" CurrentContent="@item"></Actions>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private GetContentsResponse content;

    protected override async Task OnInitializedAsync()
    {
        content = await GetContentsResponse();
    }

    private async Task ContentInfoUpdate()
    {
        content = await GetContentsResponse();
    }

    private async Task<GetContentsResponse> GetContentsResponse()
    {
        return await ApiClient.Get<GetContentsResponse>(TokenProvider, "content");
    }

    private string GetRowClass(ContentStatus contentStatus, BillStatus billStatus)
    {
        if (contentStatus == ContentStatus.Active && billStatus == BillStatus.Active)
        {
            return "active-not-paid";
        }

        if (contentStatus == ContentStatus.Active && billStatus == BillStatus.Paid)
        {
            return "active-paid";
        }

        if (contentStatus == ContentStatus.Archived && billStatus == BillStatus.Paid)
        {
            return "archived-paid";
        }

        if (contentStatus == ContentStatus.Archived && billStatus == BillStatus.Active)
        {
            return "archived-not-paid";
        }

        return "new";
    }
    
    private string GetPaymentTypeClass(PaymentType? type)
    {
        return type == PaymentType.BankAccount ? "white" : "red";
    }
}