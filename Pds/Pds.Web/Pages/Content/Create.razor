@page "/content/add"
@attribute [Authorize] 
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Person
@using Pds.Api.Contracts.Content
@using Pds.Core.Enums
@using Pds.Web.Common

@inject NavigationManager NavigationManager
@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<h3 class="card-header d-flex justify-content-between align-items-center">
    Добавление контента
    <a href="/content" class="btn btn-primary" >Назад</a>
</h3>
@if (channels == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <EditForm EditContext="@editContext" OnSubmit="@HandleSubmit">
        <div class="form-group">
            <InputRadioGroup Name="channel" @bind-Value="content.ChannelId">
                @foreach (var channel in channels)
                {
                    <InputRadio Name="channel" class="btn-check" Value="channel.Id" Id="@channel.Id"/>
                    <label class="btn btn-secondary" for="@channel.Id">@channel.Name</label>
                }
            </InputRadioGroup>
        </div>

        <div class="form-group">
            <InputRadioGroup Name="type" @bind-Value="content.Type">
                @foreach (var type in (ContentType[])Enum
                    .GetValues(typeof(ContentType)))
                {
                    var id = $"type_{socialMediaType.ToString()}";
                    <InputRadio Name="type" class="btn-check" Value="type" Id="@id"/>
                    <label class="btn btn-secondary" for="@id">@type</label>
                }
            </InputRadioGroup>
        </div>

        <div class="form-group">
            <InputRadioGroup Name="social-media-type" @bind-Value="content.SocialMediaType">
                @foreach (var socialMediaType in (SocialMediaType[])Enum
                    .GetValues(typeof(SocialMediaType)))
                {
                    var id = $"sm_type_{socialMediaType.ToString()}";
                    <InputRadio Name="social-media-type" class="btn-check" Value="socialMediaType" Id="@id"/>
                    <label class="btn btn-secondary" for="@id">@socialMediaType</label>
                }
            </InputRadioGroup>
        </div>

        <div class="form-group">
            <label for="title" class="form-label">Заголовок</label>
            <InputText class="form-control" id="title" @bind-Value="content.Title"/>
        </div>

        <div class="form-group">
            <label for="release_date" class="form-label">Дата релиза:</label>
            <InputDate class="form-control release-date" id="release_date" @bind-Value="content.ReleaseDate"/>
            
            <label for="release_date" class="form-label">Дата окончания:</label>
            <InputDate class="form-control release-date" id="release_date" @bind-Value="content.EndDateUtc"/>
        </div>

        <div class="form-group">
            <label for="comment" class="form-label">Комментарий к контенту</label>
            <InputTextArea class="form-control" id="comment" @bind-Value="content.Comment" rows="3"/>
        </div>

        <div class="form-group">
            <label for="order_cost" class="form-label">Стоимость USD:</label>
            <InputNumber class="form-control order-cost" id="order_cost" @bind-Value="content.OrderCost"/>
        </div>

        <div class="form-group">
            <label for="order_contact" class="form-label">Контакт заказчика</label>
            <InputText class="form-control" id="order_contact" @bind-Value="content.OrderContact"/>
            <div class="contact-type">
                <InputRadioGroup Name="contact-type" @bind-Value="content.OrderContactType">
                    @foreach (var type in (ContactType[])Enum
                        .GetValues(typeof(ContactType)))
                    {
                        var id = $"contact-type{type.ToString()}";
                        <InputRadio Name="contact-type" class="btn-check" Value="type" id="@id"/>
                        <label class="btn btn-secondary btn-sm" for="@id">@type</label>
                    }
                </InputRadioGroup>
            </div>
        </div>

        <div class="form-group">
            <label for="order_comment" class="form-label">Комментарий к заказу</label>
            <InputTextArea class="form-control" id="order_comment" @bind-Value="content.OrderComment" rows="3"/>
        </div>

        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group d-grid gap-2 d-md-flex justify-content-md-end">
            <button type="submit" class="btn btn-success" disabled="@isCreateButtonDisabled">Создать</button>
        </div>
    </EditForm>
}

@code {
    private int socialMediaType = 0;
    private CreateContentRequest content = new ()
    {
        ReleaseDate = DateTime.Today.Date,
        ChannelId = Guid.Parse("5aa23fa2-4b73-4a3f-c3d4-08d8d2705c5f") //Default АйТиБорода
    };
    private EditContext editContext;
    private List<ChannelDto> channels;
    private bool isCreateButtonDisabled;
    
    protected override async Task OnInitializedAsync()
    {
        isCreateButtonDisabled = false;
        editContext = new EditContext(content);
        channels = await GetChannels();
    }
    
    private async Task HandleSubmit()
    {
        var isValid = editContext.Validate();

        if (isValid)
        {
            isCreateButtonDisabled = true;
            await ApiClient.Post<object, CreateContentRequest>(TokenProvider, "content", content);
            NavigationManager.NavigateTo("/content");
        }
    }

    private async Task<List<ChannelDto>> GetChannels()
    {
        return await ApiClient.Get<List<ChannelDto>>(TokenProvider, "content/get-channels");
    }
}