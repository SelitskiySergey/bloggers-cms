@page "/"
@inherits BasePageComponent
@using static Pds.Web.Common.TitleExtension 
@using static Pds.Web.Common.Constants
@using Pds.Web.Common
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Dashboard.GetContentStatistics
@using Pds.Api.Contracts.Dashboard.GetCountriesStatistics
@using Pds.Api.Contracts.Dashboard.GetMoneyStatistics
@using Pds.Core.Extensions

@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Главная")</Title>

<h1>Привет!</h1>
<div class="info">
    @AppName - система управления контентом, разработанная специально под задачи блогеров.
</div>

@if (countriesStatistics == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <div class="statistics-container">
        @foreach (var brand in contentStatistics.Where(c => c.Contents.Any()))
        {
            <div class="brand-content-statistics">
                <div class="brand-content-statistics-title">
                    Ближайший контент: @brand.BrandName
                </div>
                <div class="brand-content-statistics-body">
                    @foreach (var content in brand.Contents)
                    {
                        <div>
                            <span class="content-date no-wrap">
                                @content.ReleaseDate.Date.ToShortStringDateWithDay()
                            </span>
                            <span class="content-type">
                                @EnumsTranslator.SocialMediaTypeToRu(content.SocialMediaType)
                            </span>
                            <span class="content-title">
                                <a class="custom-link" href="content/@content.Id">
                                    @content.Title
                                </a>
                            </span>
                        </div>
                    }
                </div>
            </div>
        }
        
        @foreach (var brand in moneyStatistics
            .Where(s => s.BillsSumForPreviousMonth > 0 ||
                        s.BillsSumForThisMonth > 0 ||
                        s.CostsSumForPreviousMonth > 0 ||
                        s.CostsSumForThisMonth > 0))
        {
            <div class="brand-money-statistics">
                <div class="brand-money-statistics-title">
                    Деньги: @brand.BrandName
                </div>
                @{
                    var thisMonthsName = new DateTime(2020, DateTime.UtcNow.Month, 1).ToString("MMMM");
                    var previousMonthsName = new DateTime(2020, DateTime.UtcNow.AddMonths(-1).Month, 1).ToString("MMMM");
                }
                <div class="brand-money-statistics-body">
                    <div>
                        <span class="month">
                            <span class="small-title">Доход</span>
                            <i>@thisMonthsName</i>
                        </span> -
                        <span class="bills-sum">
                            @brand.BillsSumForThisMonth.ToString("N0")
                        </span>
                    </div>
                    <div>
                        <span class="month">
                            <span class="small-title">Расход</span>
                            <i>@thisMonthsName</i>
                        </span> -
                        <span class="costs-sum">
                            @brand.CostsSumForThisMonth.ToString("N0")
                        </span>
                    </div>
                </div>

                <div class="brand-money-statistics-body">
                    <div>
                        <span class="month">
                            <span class="small-title">Доход</span>
                            <i>@previousMonthsName</i>
                        </span> -
                        <span class="bills-sum">
                            @brand.BillsSumForPreviousMonth.ToString("N0")
                        </span>
                    </div>
                    <div>
                        <span class="month">
                            <span class="small-title">Расход</span>
                            <i>@previousMonthsName</i>
                        </span> -
                        <span class="costs-sum">
                            @brand.CostsSumForPreviousMonth.ToString("N0")
                        </span>
                    </div>
                </div>

                <div class="brand-money-statistics-body">
                    <div>
                        <span class="month">
                            <span class="small-title">Доход</span>
                            <i>@thisMonthsName @DateTime.UtcNow.AddYears(-1).Year</i>
                        </span> -
                        <span class="bills-sum">
                            @brand.BillsSumSameMonthYearAgo.ToString("N0")
                        </span>
                    </div>
                    <div>
                        <span class="month">
                            <span class="small-title">Расход</span>
                            <i>@thisMonthsName @DateTime.UtcNow.AddYears(-1).Year</i>
                        </span> -
                        <span class="costs-sum">
                            @brand.CostsSumSameMonthYearAgo.ToString("N0")
                        </span>
                    </div>
                </div>
            </div>
        }

        @foreach (var brand in countriesStatistics.Where(b => b.Countries.Any()))
        {
            <div class="brand-city-statistics">
                <div class="brand-city-statistics-title">
                    Персоны: @brand.BrandName
                </div>
                <ul class="brand-city-statistics-body">
                    @foreach (var country in brand.Countries)
                    {
                        <li>
                            @country.Name - @country.ActivePersonsCount чел.
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
}

@code {
    private GetCountriesStatisticsResponse countriesStatistics;
    private GetMoneyStatisticsResponse moneyStatistics;
    private GetContentStatisticsResponse contentStatistics;

    protected override async Task OnInitializedAsync()
    {
        countriesStatistics = await GetCountriesStatistics();
        moneyStatistics = await GetMoneyStatistics();
        contentStatistics = await GetContentStatistics();
    }

    private async Task<GetCountriesStatisticsResponse> GetCountriesStatistics()
    {
        return await ApiClient.Get<GetCountriesStatisticsResponse>(TokenProvider, "dashboard/countries-statistics");
    }
    
    private async Task<GetMoneyStatisticsResponse> GetMoneyStatistics()
    {
        return await ApiClient.Get<GetMoneyStatisticsResponse>(TokenProvider, "dashboard/money-statistics");
    }
    
    private async Task<GetContentStatisticsResponse> GetContentStatistics()
    {
        return await ApiClient.Get<GetContentStatisticsResponse>(TokenProvider, "dashboard/content-statistics");
    }
}